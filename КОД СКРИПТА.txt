/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const CONFIG = {
  sheetId: SpreadsheetApp.getActiveSpreadsheet().getId(),
  sheets: {
    rooms: '–ù–æ–º–µ—Ä–∞',
    bookings: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
    calendar: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å',
    payments: '–ü–ª–∞—Ç–µ–∂–∏',
    settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
    prices: '–¶–µ–Ω—ã'
  },
  yookassa: {
    apiUrl: 'https://api.yookassa.ru/v3/',
    returnUrl: ScriptApp.getService().getUrl() + '?action=close_window',
    prepaymentPercentage: 0.5 // 50% –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
  },
  email: {
    from: 'no-reply@example.com',
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–∫—Ä–∏–ø—Ç–∞
 */
function getYooKassaCredentials() {
  const scriptProperties = PropertiesService.getScriptProperties();
  return {
    shopId: scriptProperties.getProperty('YOOKASSA_SHOP_ID'),
    secretKey: scriptProperties.getProperty('YOOKASSA_SECRET_KEY')
  };
}

function getTelegramCredentials() {
  const scriptProperties = PropertiesService.getScriptProperties();
  return {
    botToken: scriptProperties.getProperty('TELEGRAM_BOT_TOKEN'),
    chatId: scriptProperties.getProperty('TELEGRAM_CHAT_ID')
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
 */
function getSheet(sheetName) {
  if (!sheetName) {
    throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ª–∏—Å—Ç–∞');
  }
  const sheet = SpreadsheetApp.openById(CONFIG.sheetId).getSheetByName(sheetName);
  if (!sheet) {
    throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CONFIG.`);
  }
  return sheet;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doGet(e) {
  try {
    const params = e?.parameter || {};
    const action = params.action || 'main';

    if (action === 'check_payment') {
      return ContentService.createTextOutput(
        JSON.stringify(checkPaymentStatus(params.booking_id))
      ).setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'get_free_rooms') {
      const from = params.from;
      const to = params.to;
      const data = getFreeRooms(from, to);
      return ContentService.createTextOutput(JSON.stringify(data))
        .setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'get_calendar_data') {
      const from = params.from;
      const to = params.to;
      const bookingId = params.bookingId || null;
      const data = getCalendarOccupancy(from, to, bookingId);
      return ContentService.createTextOutput(JSON.stringify(data))
        .setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'get_room_occupancy') {
      const from = params.from;
      const to = params.to;
      const data = getRoomOccupancy(from, to);
      return ContentService.createTextOutput(JSON.stringify(data))
        .setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'simulate_payment') {
      return ContentService.createTextOutput(
        JSON.stringify(simulateYooKassaPayment(params.booking_id))
      ).setMimeType(ContentService.MimeType.JSON);
    }

    if (action === 'close_window') {
      return HtmlService.createHtmlOutput(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ</title>
          <script>
            window.onload = function() {
              setTimeout(function() {
                window.close();
              }, 2000);
              if (!window.closed) {
                document.body.innerHTML = '<h1>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É</h1>';
              }
            };
          </script>
        </head>
        <body>
          <h1>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h1>
          <p>–≠—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...</p>
        </body>
        </html>
      `);
    }

    if (action === 'payment_success') {
      return HtmlService.createHtmlOutput(`
        <h1>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</h1>
        <p>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.</p>
        <a href="${ScriptApp.getService().getUrl()}">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
      `);
    }

    const template = params.view === 'addBooking' ? 'addBooking' : 'Index';
    return HtmlService.createHtmlOutputFromFile(template)
      .setTitle('–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
      .addMetaTag('viewport', 'width=device-width, initial-scale=1');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ doGet:', error);
    return HtmlService.createHtmlOutput(`
      <h1>–û—à–∏–±–∫–∞</h1>
      <p>${error.message}</p>
      <a href="${ScriptApp.getService().getUrl()}">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
    `);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
function doPost(e) {
  try {
    const params = JSON.parse(e.postData.contents);
    const action = params.action || '';

    if (action === 'add_manual_booking') {
      const result = addManualBooking(params.bookingData);
      return ContentService.createTextOutput(JSON.stringify(result))
        .setMimeType(ContentService.MimeType.JSON);
    }

    if (e.headers && e.headers['HTTP-YOOKASSA-SIGNATURE']) {
      if (!verifyWebhookSignature(e)) {
        throw new Error('Invalid webhook signature');
      }

      if (params.event === 'payment.succeeded') {
        const payment = params.object;
        updatePaymentStatus(payment);
      }
    }

    return ContentService.createTextOutput(JSON.stringify({ success: true }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    console.error('Webhook error:', error);
    return ContentService.createTextOutput(JSON.stringify({ error: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
 */
function verifyWebhookSignature(e) {
  try {
    const signature = e.headers['HTTP-YOOKASSA-SIGNATURE'];
    const body = e.postData.contents;
    const credentials = getYooKassaCredentials();

    const hmac = Utilities.computeHmacSha256Signature(body, credentials.secretKey);
    const encodedSignature = Utilities.base64Encode(hmac);

    return signature === encodedSignature;
  } catch (error) {
    console.error('Signature verification failed:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
 */
function getAvailableRooms(checkIn, checkOut) {
  const lock = LockService.getScriptLock();
  lock.waitLock(30000);
  try {
    const roomsSh = getSheet(CONFIG.sheets.rooms);
    const calendarSh = getSheet(CONFIG.sheets.calendar);
    const pricesSh = getSheet(CONFIG.sheets.prices);

    const booked = calendarSh.getDataRange().getValues();
    const roomsData = roomsSh.getDataRange().getValues();
    const pricesData = pricesSh.getDataRange().getValues();
    const pricesHeaders = pricesData[0];

    const available = [];

    for (let i = 1; i < roomsData.length; i++) {
      const roomRow = roomsData[i];
      const roomId = roomRow[0];

      const isFree = !booked.some(b =>
        b[0] == roomId && isDateOverlap(checkIn, checkOut, b[1], b[2])
      );
      if (!isFree) continue;

      const pricePerDay = {};

      for (let j = 1; j < pricesData.length; j++) {
        const priceRow = pricesData[j];
        if (priceRow[0] == roomId) {
          const month = String(priceRow[1]).padStart(2, '0');
          const days = {
            '–ü–Ω': 2, '–í—Ç': 3, '–°—Ä': 4, '–ß—Ç': 5, '–ü—Ç': 6, '–°–±': 7, '–í—Å': 8
          };

          for (const [dayName, colIndex] of Object.entries(days)) {
            const priceKey = `${month}${dayName}`;
            pricePerDay[priceKey] = getCorrectNumber(priceRow[colIndex]);
          }
        }
      }

      available.push({
        id: roomRow[0],
        name: roomRow[1],
        type: roomRow[2],
        capacity: roomRow[3],
        description: roomRow[4] || '',
        pricePerDay: pricePerDay
      });
    }

    return available;
  } finally {
    lock.releaseLock();
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
function sendTelegramMessage(message) {
  try {
    const credentials = getTelegramCredentials();
    
    if (!credentials.botToken || !credentials.chatId) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç credentials –¥–ª—è Telegram');
      return false;
    }
    
    const url = `https://api.telegram.org/bot${credentials.botToken}/sendMessage`;
    
    const payload = {
      chat_id: credentials.chatId,
      text: message,
      parse_mode: 'HTML'
    };
    
    const options = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    const response = UrlFetchApp.fetch(url, options);
    const result = JSON.parse(response.getContentText());
    
    if (!result.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', result);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
    return false;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è Telegram –∏ Email
 */
function formatPaymentMessage(bookingData, paymentUrl) {
  const checkInDate = new Date(bookingData.checkIn).toLocaleDateString('ru-RU');
  const checkOutDate = new Date(bookingData.checkOut).toLocaleDateString('ru-RU');
  
  const paymentTypeText = bookingData.paymentType === 'prepayment' 
    ? `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${bookingData.prepaymentPercentage}%`
    : '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞';
  
  // –§–æ—Ä–º–∞—Ç –¥–ª—è Telegram (HTML)
  const telegramMessage = `üè® <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b>

üìù <b>–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏:</b> ${bookingData.bookingNumber}
üë§ <b>–ì–æ—Å—Ç—å:</b> ${bookingData.guestName}
üìß <b>Email:</b> ${bookingData.email}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${bookingData.guestPhone}
üè† <b>–ù–æ–º–µ—Ä:</b> ${bookingData.roomId}
üìÖ <b>–ó–∞–µ–∑–¥:</b> ${checkInDate}
üìÖ <b>–í—ã–µ–∑–¥:</b> ${checkOutDate}
üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${bookingData.totalPrice} ‚ÇΩ
üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> ${paymentTypeText}

üîó <a href="${paymentUrl}">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</a>`;

  // –§–æ—Ä–º–∞—Ç –¥–ª—è Email (plain text —Å HTML-—Ç–µ–≥–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã)
  const emailMessage = `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!

–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${bookingData.bookingNumber}
–ì–æ—Å—Ç—å: ${bookingData.guestName}
Email: ${bookingData.email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.guestPhone}
–ù–æ–º–µ—Ä: ${bookingData.roomId}
–ó–∞–µ–∑–¥: ${checkInDate}
–í—ã–µ–∑–¥: ${checkOutDate}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${bookingData.totalPrice} ‚ÇΩ
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: ${paymentTypeText}

–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ${paymentUrl}

–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º +7 (908) 068-60-60, –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã`;

  return { telegramMessage, emailMessage };
}

function createBooking(bookingData) {
  const lock = LockService.getScriptLock();
  let bookingId;
  
  try {
    lock.waitLock(30000);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!bookingData || !bookingData.roomId || !bookingData.checkIn || !bookingData.checkOut || !bookingData.paymentType || !bookingData.guestEmail) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –æ–ø–ª–∞—Ç—ã/–ø–æ—á—Ç–∞');
    }
    
    if (!['full', 'prepayment'].includes(bookingData.paymentType)) {
      throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –æ–ø–ª–∞—Ç—ã');
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏—Å—Ç–æ–≤
    const bookingsSheet = getSheet(CONFIG.sheets.bookings);
    const paymentsSheet = getSheet(CONFIG.sheets.payments);
    const calendarSheet = getSheet(CONFIG.sheets.calendar);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
    const calendarData = calendarSheet.getDataRange().getValues();
    const isAvailable = !calendarData.some(b =>
      b[0] == bookingData.roomId && isDateOverlap(bookingData.checkIn, bookingData.checkOut, b[1], b[2])
    );
    
    if (!isAvailable) {
      throw new Error('–í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.');
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bookingId = Utilities.getUuid();
    const bookingNumber = generateBookingNumber();
    const expiresAt = new Date(Date.now() + 3600000);
    
    // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—É–º–º
    const totalPrice = bookingData.totalPrice || 0;
    const prepaymentPercentage = bookingData.paymentType === 'prepayment' 
      ? (CONFIG.yookassa?.prepaymentPercentage || 50) 
      : 1;
    const paymentAmount = totalPrice * prepaymentPercentage;
    const pricePerNight = (bookingData.nights && bookingData.nights > 0) ? totalPrice / bookingData.nights : 0;
    
    // –ó–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendarSheet.appendRow([
      bookingData.roomId,
      bookingData.checkIn,
      bookingData.checkOut,
      bookingId,
      bookingData.guestName || '',
      bookingData.guestPhone || '',
      paymentAmount,
      '–ß–µ—Ä–µ–∑ —Å–∞–π—Ç',
      bookingData.paymentType,
      prepaymentPercentage,
      totalPrice,
    ]);
    
    // –ó–∞–ø–∏—Å—å –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bookingsSheet.appendRow([
      bookingId,
      bookingNumber,
      bookingData.roomId,
      bookingData.guestName || '',
      bookingData.guestEmail || '',
      bookingData.guestPhone || '',
      bookingData.checkIn,
      bookingData.checkOut,
      new Date(),
      '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
      expiresAt,
      pricePerNight,
      paymentAmount,
      bookingData.paymentType,
      prepaymentPercentage,
      totalPrice
    ]);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    const paymentResult = createYooKassaPayment(
      paymentAmount,
      bookingId,
      `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ${bookingNumber} (${bookingData.paymentType === 'prepayment' ? '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ' + prepaymentPercentage + '%' : '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞'})`
    );
    
    // –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
    paymentsSheet.appendRow([
      paymentResult.id,
      bookingId,
      'no',
      expiresAt,
      paymentAmount,
      paymentResult.status,
      '',
      '',
      paymentResult.confirmationUrl,
      bookingData.paymentType
    ]);
    
    // –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
    try {
      const telegramData = {
        bookingNumber: bookingNumber,
        guestName: bookingData.guestName || '',
        email: bookingData.guestEmail || '',
        guestPhone: bookingData.guestPhone || '',
        roomId: bookingData.roomId,
        checkIn: bookingData.checkIn,
        checkOut: bookingData.checkOut,
        totalPrice: totalPrice,
        paymentType: bookingData.paymentType,
        prepaymentPercentage: prepaymentPercentage
      };
      
      const { telegramMessage, emailMessage } = formatPaymentMessage(telegramData, paymentResult.confirmationUrl);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
      sendTelegramMessage(telegramMessage);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
      MailApp.sendEmail({
        to: bookingData.guestEmail,
        subject: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ${bookingNumber}`,
        body: emailMessage
      });
    } catch (notificationError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    }
    
    return {
      success: true,
      paymentUrl: paymentResult.confirmationUrl,
      bookingId: bookingId,
      bookingNumber: bookingNumber,
      paymentType: bookingData.paymentType,
      paymentAmount: paymentAmount,
      totalPrice: totalPrice,
      prepaymentPercentage: prepaymentPercentage,
      simulateUrl: ScriptApp.getService().getUrl() + `?action=simulate_payment&booking_id=${bookingId}`
    };
    
  } catch (error) {
    // –û—Ç–∫–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (bookingId) {
      try {
        const calendarSheet = getSheet(CONFIG.sheets.calendar);
        const calendarData = calendarSheet.getDataRange().getValues();
        for (let i = calendarData.length - 1; i >= 0; i--) {
          if (calendarData[i][3] === bookingId) {
            calendarSheet.deleteRow(i + 1);
            break;
          }
        }
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', e);
      }
    }
    
    console.error('–û—à–∏–±–∫–∞ –≤ createBooking:', error);
    throw error;
    
  } finally {
    lock.releaseLock();
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –Æ–ö–∞—Å—Å–µ
 */
function createYooKassaPayment(amount, bookingId, description) {
  const credentials = getYooKassaCredentials();
  const url = CONFIG.yookassa.apiUrl + 'payments';
  const auth = credentials.shopId + ':' + credentials.secretKey;

  const booking = getBookingDetails(bookingId);
  const customerEmail = booking?.email || 'default@example.com'; // –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π email, –µ—Å–ª–∏ booking.email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

  const payload = {
    amount: {
      value: amount.toFixed(2),
      currency: "RUB"
    },
    capture: true,
    confirmation: {
      type: "redirect",
      return_url: CONFIG.yookassa.returnUrl
    },
    description: description,
    metadata: {
      booking_id: bookingId
    },
    receipt: {
      customer: {
        email: customerEmail
      },
      items: [
        {
          description: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ (ID: ${bookingId})`,
          quantity: "1",
          amount: {
            value: amount.toFixed(2),
            currency: "RUB"
          },
          vat_code: "1",
          payment_mode: 'full_payment',
          payment_subject: "service"
        }
      ]
    }
  };

  const options = {
    method: 'post',
    headers: {
      'Authorization': 'Basic ' + Utilities.base64Encode(auth),
      'Idempotence-Key': Utilities.getUuid(),
      'Content-Type': 'application/json'
    },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  try {
    const response = UrlFetchApp.fetch(url, options);
    const responseCode = response.getResponseCode();
    const result = JSON.parse(response.getContentText());

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('–û—Ç–≤–µ—Ç –æ—Ç –ÆKassa:', JSON.stringify(result, null, 2));
    console.log('–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:', responseCode);

    if (result.error) {
      throw new Error(`–ÆKassa –æ—à–∏–±–∫–∞: ${result.description} (–∫–æ–¥: ${result.code})`);
    }

    if (!result.confirmation || !result.confirmation.confirmation_url) {
      throw new Error('confirmation_url –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ –ÆKassa');
    }

    return {
      id: result.id,
      status: result.status,
      confirmationUrl: result.confirmation.confirmation_url
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ createYooKassaPayment:', error);
    throw error;
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
function updatePaymentStatus(payment) {
  const lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000);

    const paymentsSheet = getSheet(CONFIG.sheets.payments);
    const data = paymentsSheet.getDataRange().getValues();

    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === payment.id) {
        const row = i + 1;

        paymentsSheet.getRange(row, 6).setValue(payment.status);

        if (payment.status === 'succeeded') {
          paymentsSheet.getRange(row, 3).setValue('yes');
          paymentsSheet.getRange(row, 7).setValue(payment.payment_method?.id || '');
          paymentsSheet.getRange(row, 8).setValue(new Date());

          const bookingId = payment.metadata.booking_id;
          const bookingRow = findBookingRow(bookingId);

          if (bookingRow > 0) {
            getSheet(CONFIG.sheets.bookings)
              .getRange(bookingRow, 10)
              .setValue('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');

            const booking = getBookingDetails(bookingId);
            if (booking) {
              sendConfirmationEmail({
                email: booking.email,
                bookingNumber: booking.bookingNumber,
                guestName: booking.guestName,
                guestPhone: booking.guestPhone,
                roomId: booking.roomId,
                checkIn: booking.checkIn,
                checkOut: booking.checkOut,
                totalPrice: booking.totalPrice,
                paymentType: booking.paymentType,
                prepaymentPercentage: booking.prepaymentPercentage
              });
              
              // –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–ë –£–°–ü–ï–®–ù–û–ô –û–ü–õ–ê–¢–ï –í TELEGRAM
              try {
                const successMessage = `‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>

üìù <b>–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏:</b> ${booking.bookingNumber}
üë§ <b>–ì–æ—Å—Ç—å:</b> ${booking.guestName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${booking.guestPhone}
üè† <b>–ù–æ–º–µ—Ä:</b> ${booking.roomId}
üí∞ <b>–°—É–º–º–∞:</b> ${booking.totalPrice} ‚ÇΩ
üí≥ <b>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</b> ${booking.paymentType === 'prepayment' ? `–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ${booking.prepaymentPercentage*100}%` : '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞'}

üéâ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!`;
                
                sendTelegramMessage(successMessage);
              } catch (telegramError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –≤ Telegram:', telegramError);
              }
            }
          }
        }
        break;
      }
    }
  } finally {
    lock.releaseLock();
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
 */
function checkPaymentStatus(bookingId) {
  const payment = findPaymentByBookingId(bookingId);

  if (!payment) {
    return { status: 'not_found' };
  }

  if (payment.is_paid === 'yes') {
    return { status: 'paid' };
  }

  if (new Date(payment.expires_at) < new Date()) {
    return { status: 'expired' };
  }

  try {
    const status = getYooKassaPaymentStatus(payment.id);
    if (status === 'succeeded') {
      updatePaymentStatus({
        id: payment.id,
        status: 'succeeded',
        metadata: { booking_id: bookingId },
        payment_method: { id: 'manual_check' }
      });
      return { status: 'paid' };
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –Æ–ö–∞—Å—Å—ã:', e);
  }

  return { status: 'pending' };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –Æ–ö–∞—Å—Å—ã
 */
function getYooKassaPaymentStatus(paymentId) {
  const credentials = getYooKassaCredentials();
  const url = CONFIG.yookassa.apiUrl + 'payments/' + paymentId;
  const auth = credentials.shopId + ':' + credentials.secretKey;

  const options = {
    headers: {
      'Authorization': 'Basic ' + Utilities.base64Encode(auth),
      'Content-Type': 'application/json'
    },
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  const result = JSON.parse(response.getContentText());

  if (result.error) {
    throw new Error(`–Æ–ö–∞—Å—Å–∞ –æ—à–∏–±–∫–∞: ${result.description}`);
  }

  return result.status;
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã
 */
function simulateYooKassaPayment(bookingId) {
  const lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000);

    const payment = findPaymentByBookingId(bookingId);

    if (!payment) {
      return { success: false, message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };
    }

    if (payment.is_paid === 'yes') {
      return { success: false, message: '–û–ø–ª–∞—Ç–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' };
    }

    if (new Date(payment.expires_at) < new Date()) {
      return { success: false, message: '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ' };
    }

    updatePaymentStatus({
      id: payment.id,
      status: 'succeeded',
      metadata: { booking_id: bookingId },
      payment_method: { id: 'simulated_' + Utilities.getUuid() }
    });

    return {
      success: true,
      message: '–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞',
      bookingId: bookingId,
      amount: payment.amount
    };
  } catch (error) {
    return { success: false, message: error.message };
  } finally {
    lock.releaseLock();
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 9-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏
 */
function generateBookingNumber() {
  const min = 100000000;
  const max = 999999999;
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID –±—Ä–æ–Ω–∏
 */
function findPaymentByBookingId(bookingId) {
  const data = getSheet(CONFIG.sheets.payments).getDataRange().getDisplayValues();
  for (let i = 1; i < data.length; i++) {
    if (data[i][1] === bookingId) {
      return {
        row: i + 1,
        id: data[i][0],
        booking_id: data[i][1],
        is_paid: data[i][2],
        expires_at: data[i][3],
        amount: getCorrectNumber(data[i][4]),
        status: data[i][5],
        paymentType: data[i][9]
      };
    }
  }
  return null;
}

/**
 * –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function findBookingRow(bookingId) {
  const data = getSheet(CONFIG.sheets.bookings).getDataRange().getDisplayValues();
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] === bookingId) return i + 1;
  }
  return -1;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getBookingDetails(bookingId) {
  const data = getSheet(CONFIG.sheets.bookings).getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] === bookingId) {
      return {
        email: data[i][4],
        bookingNumber: data[i][1],
        guestName: data[i][3],
        guestPhone: data[i][5],
        roomId: data[i][2],
        checkIn: data[i][6],
        checkOut: data[i][7],
        totalPrice: getCorrectNumber(data[i][12]),
        paymentType: data[i][13],
        prepaymentPercentage: getCorrectNumber(data[i][14]),
        fullPrice: getCorrectNumber(data[i][15])
      };
    }
  }
  return null;
}
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–∞
 */
function getRoomById(roomId) {
  const data = getSheet(CONFIG.sheets.rooms).getDataRange().getValues();
  for (let i = 1; i < data.length; i++) {
    if (data[i][0] == roomId) {
      return {
        id: data[i][0],
        name: data[i][1],
        type: data[i][2],
        pricePerNight: getCorrectNumber(data[i][4])
      };
    }
  }
  return null;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
 */
function sendConfirmationEmail(booking) {
  try {
    const room = getRoomById(booking.roomId);
    if (!room) {
      console.error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', booking.roomId);
      return;
    }

    const paymentTypeText = booking.paymentType === 'prepayment' ? '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%' : '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞';
    const paidAmount = booking.paymentType === 'prepayment' 
      ? booking.totalPrice * CONFIG.yookassa.prepaymentPercentage 
      : booking.totalPrice;

    const subject = `${CONFIG.email.subject} ‚Ññ${booking.bookingNumber}`;

    const htmlBody = `
      <h2>–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!</h2>
      <p><strong>–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏:</strong> ${booking.bookingNumber}</p>
      <p><strong>–ì–æ—Å—Ç—å:</strong> ${booking.guestName}</p>
      <p><strong>–ù–æ–º–µ—Ä:</strong> ${room.name} (${room.type})</p>
      <p><strong>–î–∞—Ç—ã:</strong> ${formatDateForEmail(booking.checkIn)} - ${formatDateForEmail(booking.checkOut)}</p>
      <p><strong>–¢–∏–ø –æ–ø–ª–∞—Ç—ã:</strong> ${paymentTypeText}</p>
      <p><strong>–û–ø–ª–∞—á–µ–Ω–æ:</strong> ${formatCurrency(booking.totalPrice)}</p>
      <p><strong>–ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</strong> ${formatCurrency(booking.totalPrice)}</p>
      ${booking.paymentType === 'prepayment' ? `<p><strong>–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ:</strong> ${formatCurrency(booking.totalPrice)}</p>` : ''}
      <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –±–∞–∑—ã –æ—Ç–¥—ã—Ö–∞ –ó–æ–ª–æ—Ç—ã–µ –ø–µ—Å–∫–∏!</p>
    `;

    MailApp.sendEmail({
      to: booking.email,
      subject: subject,
      htmlBody: htmlBody
    });

    const scriptEmail = Session.getActiveUser().getEmail();
    MailApp.sendEmail({
      to: scriptEmail,
      subject: "–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
      htmlBody: htmlBody
    });

    console.log(`–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É: ${booking.email} –∏ –∫–æ–ø–∏—è –Ω–∞: ${scriptEmail}`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', e);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è email
 */
function formatDateForEmail(dateString) {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  } catch (e) {
    return dateString;
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
 */
function formatCurrency(amount) {
  return Utilities.formatString('%.2f ‚ÇΩ', getCorrectNumber(amount));
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∞—Ç
 */
function isDateOverlap(checkIn, checkOut, bookedFrom, bookedTo) {
  try {
    const ci = new Date(checkIn);
    const co = new Date(checkOut);
    const bf = new Date(bookedFrom);
    const bt = new Date(bookedTo);
    return ci < bt && co > bf;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ isDateOverlap:', e);
    return true;
  }
}

/**
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
 */
function getCorrectNumber(value) {
  try {
    if (value === null || value === undefined) return 0;
    if (typeof value === 'number') return value;
    if (value instanceof Date) return value.getTime();

    const str = value.toString().trim();
    if (!str) return 0;

    const numStr = str.replace(/,/g, '.').replace(/\s/g, '');
    const num = parseFloat(numStr);
    return isNaN(num) ? 0 : num;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ getCorrectNumber:', e);
    return 0;
  }
}

/**
 * –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
 */
function simpleUpdateAllPending() {
  try {
    console.log('–ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π');

    const lock = LockService.getScriptLock();
    lock.waitLock(30000);

    const paymentsSheet = getSheet(CONFIG.sheets.payments);
    const paymentsData = paymentsSheet.getDataRange().getValues();
    const bookingsSheet = getSheet(CONFIG.sheets.bookings);
    const bookingsData = bookingsSheet.getDataRange().getValues();

    let updatedCount = 0;

    for (let i = 1; i < paymentsData.length; i++) {
      const paymentRow = paymentsData[i];
      const paymentId = paymentRow[0];
      const bookingId = paymentRow[1];
      const isPaid = paymentRow[2];
      const paymentStatus = paymentRow[5];

      if (isPaid === 'no' || isPaid === '') {
        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂:', paymentId, '–¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', bookingId);

        const realPaymentStatus = getYooKassaPaymentStatus(paymentId);

        if (realPaymentStatus) {
          if (realPaymentStatus === 'succeeded') {
            paymentsSheet.getRange(i + 1, 3).setValue('yes');
            paymentsSheet.getRange(i + 1, 6).setValue('succeeded');
            paymentsSheet.getRange(i + 1, 8).setValue(new Date());

            for (let j = 1; j < bookingsData.length; j++) {
              if (String(bookingsData[j][0]).trim() === String(bookingId).trim()) {
                bookingsSheet.getRange(j + 1, 10).setValue('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
                console.log(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${bookingId} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${j + 1}`);
                break;
              }
            }

            updatedCount++;
            console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω`);
          } else if (realPaymentStatus === 'canceled') {
            paymentsSheet.getRange(i + 1, 6).setValue('canceled');

            for (let j = 1; j < bookingsData.length; j++) {
              if (String(bookingsData[j][0]).trim() === String(bookingId).trim()) {
                bookingsSheet.getRange(j + 1, 10).setValue('–û—Ç–º–µ–Ω–µ–Ω–æ');
                console.log(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ${bookingId} –æ—Ç–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${j + 1}`);
                break;
              }
            }

            console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –æ—Ç–º–µ–Ω–µ–Ω`);
          } else {
            console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ: ${realPaymentStatus}`);
          }
        } else {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}`);
        }
      }
    }

    lock.releaseLock();
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–ª–∞—Ç–µ–∂–µ–π`);
    return updatedCount;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    return 0;
  }
}

/**
 * –ú–µ–Ω—é Google Sheets
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –æ—Ç–¥—ã—Ö–∞')
    .addItem('–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã', 'runUpdateAllPayments')
    .addItem('–û–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂', 'runUpdateSinglePayment')
    .addSeparator()
    .addItem('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π', 'showPaymentStats')
    .addSeparator()
    .addItem('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏', 'showBookingManagerPage')
    .addToUi();
}

/**
 * –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
 */
function showBookingManagerPage() {
  const html = HtmlService.createHtmlOutputFromFile('BookingManager')
    .setWidth(1600)
    .setHeight(1000)
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

  SpreadsheetApp.getUi().showModalDialog(html, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏');
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
 */
function runUpdateAllPayments() {
  const ui = SpreadsheetApp.getUi();

  const result = ui.alert(
    '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π',
    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–ª–∞—Ç–µ–∂–µ–π?',
    ui.ButtonSet.YES_NO
  );

  if (result === ui.Button.YES) {
    const startTime = new Date();
    ui.alert('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...', '–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç', ui.ButtonSet.OK);

    try {
      const updatedCount = simpleUpdateAllPending();
      const endTime = new Date();
      const duration = Math.round((endTime - startTime) / 1000);

      ui.alert(
        '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
        `–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${updatedCount}\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`,
        ui.ButtonSet.OK
      );
    } catch (error) {
      ui.alert('–û—à–∏–±–∫–∞!', `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`, ui.ButtonSet.OK);
    }
  }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 */
function runUpdateSinglePayment() {
  const ui = SpreadsheetApp.getUi();

  const result = ui.prompt(
    '–û–±–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –ø–ª–∞—Ç–µ–∂',
    '–í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:',
    ui.ButtonSet.OK_CANCEL
  );

  if (result.getSelectedButton() === ui.Button.OK) {
    const paymentId = result.getResponseText().trim();

    if (paymentId) {
      try {
        const status = getYooKassaPaymentStatus(paymentId);
        ui.alert('–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞', `–ü–ª–∞—Ç–µ–∂ ${paymentId}: ${status}`, ui.ButtonSet.OK);
      } catch (error) {
        ui.alert('–û—à–∏–±–∫–∞!', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: ${error.message}`, ui.ButtonSet.OK);
      }
    }
  }
}

/**
 * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
 */
function showPaymentStats() {
  const ui = SpreadsheetApp.getUi();
  const sheet = getSheet(CONFIG.sheets.payments);
  const data = sheet.getDataRange().getValues();

  let totalPayments = data.length - 1;
  let paidCount = 0;
  let pendingCount = 0;
  let canceledCount = 0;

  for (let i = 1; i < data.length; i++) {
    const status = data[i][5];
    if (status === 'succeeded') paidCount++;
    else if (status === 'pending') pendingCount++;
    else if (status === 'canceled') canceledCount++;
  }

  ui.alert(
    '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π',
    `–í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${totalPayments}\n` +
    `–û–ø–ª–∞—á–µ–Ω–æ: ${paidCount}\n` +
    `–û–∂–∏–¥–∞—é—Ç: ${pendingCount}\n` +
    `–û—Ç–º–µ–Ω–µ–Ω–æ: ${canceledCount}`,
    ui.ButtonSet.OK
  );
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
 */
function formatPrice(price) {
  if (!price) return '‚Äî';
  try {
    let num = 0;
    if (typeof price === 'string') {
      num = parseFloat(price.replace(/[^\d.-]/g, ''));
    } else if (typeof price === 'number') {
      num = price;
    }

    if (isNaN(num) || !isFinite(num)) return '‚Äî';
    if (num > 1000000) {
      console.error('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è —Ü–µ–Ω–∞:', num);
      return '‚Äî';
    }

    return num.toLocaleString('ru-RU') + ' ‚ÇΩ';
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:', e);
    return '‚Äî';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 */
function formatDate(date) {
  if (!date) return '‚Äî';
  try {
    if (typeof date === 'string') date = new Date(date);
    if (!(date instanceof Date) || isNaN(date)) return '‚Äî';
    return Utilities.formatDate(date, 'Europe/Moscow', 'dd.MM.yyyy');
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', e);
    return '‚Äî';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
 */
function formatStatus(status) {
  if (!status) return '–ù–æ–≤–æ–µ';
  status = String(status).toLowerCase();
  if (status.includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥')) return '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ';
  if (status.includes('–æ–∂–∏–¥')) return '–û–∂–∏–¥–∞–µ—Ç';
  if (status.includes('–æ—Ç–º–µ–Ω')) return '–û—Ç–º–µ–Ω–µ–Ω–æ';
  if (status.includes('–∑–∞–≤–µ—Ä—à')) return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
  if (status.includes('—Ä—É—á–Ω')) return '–†—É—á–Ω–∞—è';
  return '–ù–æ–≤–æ–µ';
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
function validateBookingData(data) {
  if (!data) return {};
  return {
    guestName: data.guestName || '‚Äî',
    guestEmail: data.guestEmail || '‚Äî',
    guestPhone: data.guestPhone || '‚Äî',
    status: data.status || '–ù–æ–≤–æ–µ',
    totalPrice: data.totalPrice || 0,
    paymentType: data.paymentType || 'full',
    prepaymentPercentage: data.prepaymentPercentage || (data.paymentType === 'prepayment' ? 50 : 1),
    fullPrice: data.totalPrice || 0
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤
 */
function getRoomOccupancy(fromDate, toDate) {
  try {
    const roomsSheet = getSheet(CONFIG.sheets.rooms);
    const calendarSheet = getSheet(CONFIG.sheets.calendar);
    const bookingsSheet = getSheet(CONFIG.sheets.bookings);

    const roomsData = roomsSheet.getDataRange().getValues();
    const calendarData = calendarSheet.getDataRange().getValues();
    const bookingsData = bookingsSheet.getDataRange().getValues();

    const from = new Date(fromDate);
    const to = new Date(toDate);

    const roomMap = {};
    for (let i = 1; i < roomsData.length; i++) {
      const roomId = roomsData[i][0];
      roomMap[roomId] = {
        name: roomsData[i][1] || roomId,
        type: roomsData[i][2] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        bookings: []
      };
    }

    for (let i = 1; i < calendarData.length; i++) {
      const row = calendarData[i];
      const roomId = row[0];
      const checkIn = new Date(row[1]);
      const checkOut = new Date(row[2]);
      const bookingId = row[3] || '';
      const guestName = row[4] || '';
      const guestPhone = row[5] || '';
      const price = getCorrectNumber(row[6]) || 0;
      const status = row[7] || '';
      const paymentType = row[8] || 'full';
      const prepaymentPercentage = getCorrectNumber(row[9]) || (paymentType === 'prepayment' ? 50 : 1);
      const fullPrice = getCorrectNumber(row[10]) || price;

      if (status.toLowerCase().includes('–Ω–µ —Å–¥–∞–µ—Ç—Å—è')) continue;

      if (checkIn <= to && checkOut >= from) {
        if (roomMap[roomId]) {
          roomMap[roomId].bookings.push({
            bookingId: bookingId,
            guestName: guestName,
            guestPhone: guestPhone,
            checkIn: Utilities.formatDate(checkIn, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
            checkOut: Utilities.formatDate(checkOut, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
            price: price,
            status: formatStatus(status),
            paymentType: paymentType,
            prepaymentPercentage: prepaymentPercentage,
            fullPrice: fullPrice
          });
        }
      }
    }

    const result = Object.values(roomMap).filter(room => room.bookings.length > 0 || true);
    return result;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ getRoomOccupancy:', e);
    return [];
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
function getCalendarOccupancy(fromDate, toDate, bookingIdFilter) {
  try {
    const calendarSheet = getSheet(CONFIG.sheets.calendar);
    const roomsSheet = getSheet(CONFIG.sheets.rooms);
    const bookingsSheet = getSheet(CONFIG.sheets.bookings);

    const data = calendarSheet.getDataRange().getValues();
    const roomsData = roomsSheet.getDataRange().getValues();
    const bookingsData = bookingsSheet.getDataRange().getValues();

    const roomMap = {};
    for (let i = 1; i < roomsData.length; i++) {
      const roomId = roomsData[i][0];
      roomMap[roomId] = {
        name: roomsData[i][1],
        type: roomsData[i][2]
      };
    }

    const statusMap = {};
    for (let i = 1; i < bookingsData.length; i++) {
      const bookingId = bookingsData[i][0];
      const status = bookingsData[i][9];
      if (bookingId) statusMap[bookingId] = status.toString().trim();
    }

    const result = [];
    const from = new Date(fromDate);
    const to = new Date(toDate);

    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      const roomId = row[0];
      const checkIn = new Date(row[1]);
      const checkOut = new Date(row[2]);
      const bookingId = row[3] || '';
      const guestName = row[4] || '';
      const guestPhone = row[5] || '';
      const price = getCorrectNumber(row[6]) || 0;
      const paymentType = row[8] || 'full';
      const prepaymentPercentage = getCorrectNumber(row[9]) || (paymentType === 'prepayment' ? 50 : 1);
      const fullPrice = getCorrectNumber(row[10]) || price;

      if ((row[7] || '').toString().toLowerCase().includes('–Ω–µ —Å–¥–∞–µ—Ç—Å—è')) {
        continue;
      }

      if (checkIn <= to && checkOut >= from) {
        if (bookingIdFilter && !bookingId.toString().includes(bookingIdFilter)) {
          continue;
        }

        const isManual = bookingId.toString().startsWith('M-');
        const status = isManual ? '–†—É—á–Ω–∞—è' : (statusMap[bookingId] || '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');

        const roomInfo = roomMap[roomId] || { name: roomId, type: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' };

        result.push({
          bookingId: bookingId,
          roomName: roomInfo.name,
          roomType: roomInfo.type,
          guestName: guestName,
          guestPhone: guestPhone,
          checkIn: Utilities.formatDate(checkIn, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
          checkOut: Utilities.formatDate(checkOut, Session.getScriptTimeZone(), 'yyyy-MM-dd'),
          priceValue: price,
          status: status,
          paymentType: paymentType,
          prepaymentPercentage: prepaymentPercentage,
          fullPrice: fullPrice
        });
      }
    }

    return result;
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –≤ getCalendarOccupancy:', e);
    return [];
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
 */
function isRoomAvailable(roomId, checkIn, checkOut) {
  const calendarSheet = getSheet(CONFIG.sheets.calendar);
  const data = calendarSheet.getDataRange().getValues();

  const checkInDate = new Date(checkIn);
  const checkOutDate = new Date(checkOut);

  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    if (row[0] == roomId) {
      const bookedFrom = new Date(row[1]);
      const bookedTo = new Date(row[2]);

      if (checkInDate < bookedTo && checkOutDate > bookedFrom) {
        return false;
      }
    }
  }

  return true;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function addManualBooking(bookingData) {
  const lock = LockService.getScriptLock();
  try {
    lock.waitLock(30000);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ bookingData:', JSON.stringify(bookingData));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const missingFields = [];
    if (!bookingData.roomId) missingFields.push('roomId');
    if (!bookingData.checkIn) missingFields.push('checkIn');
    if (!bookingData.checkOut) missingFields.push('checkOut');
    if (!bookingData.guestName) missingFields.push('guestName');

    if (missingFields.length > 0) {
      return {
        success: false,
        error: `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
    const from = new Date(bookingData.checkIn);
    const to = new Date(bookingData.checkOut);
    if (isNaN(from.getTime()) || isNaN(to.getTime())) {
      return {
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –∑–∞–µ–∑–¥–∞ –∏–ª–∏ –≤—ã–µ–∑–¥–∞'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
    if (!isRoomAvailable(bookingData.roomId, bookingData.checkIn, bookingData.checkOut)) {
      return {
        success: false,
        error: '–ù–æ–º–µ—Ä –∑–∞–Ω—è—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã'
      };
    }

    const calendarSheet = getSheet(CONFIG.sheets.calendar);
    const bookingId = 'M-' + Utilities.getUuid().substring(0, 8);
    const paymentType = bookingData.paymentType || 'full';
    const prepaymentPercentage = bookingData.prepaymentPercentage && paymentType === 'prepayment' 
      ? parseFloat(bookingData.prepaymentPercentage) 
      : (paymentType === 'prepayment' ? 0.5 : 1);

    // –†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    let totalPrice = parseFloat(bookingData.price) || 0;
    if (totalPrice === 0) {
      const pricesSheet = getSheet(CONFIG.sheets.prices);
      const pricesData = pricesSheet.getDataRange().getValues();
      const priceRow = pricesData.find(row => row[0] == bookingData.roomId && row[1] == (from.getMonth() + 1));
      if (priceRow) {
        let currentDate = new Date(from);
        while (currentDate < to) {
          const dayOfWeek = currentDate.getDay();
          const priceIndex = dayOfWeek === 0 ? 8 : 2 + dayOfWeek - 1;
          totalPrice += parseFloat(priceRow[priceIndex]) || 0;
          currentDate.setDate(currentDate.getDate() + 1);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ totalPrice –≤–∞–ª–∏–¥–µ–Ω
    if (totalPrice <= 0) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
      };
    }

    const checkInFormatted = Utilities.formatDate(
      from,
      Session.getScriptTimeZone(),
      'dd.MM.yyyy'
    );

    const checkOutFormatted = Utilities.formatDate(
      to,
      Session.getScriptTimeZone(),
      'dd.MM.yyyy'
    );

    // –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    calendarSheet.appendRow([
      bookingData.roomId,
      checkInFormatted,
      checkOutFormatted,
      bookingId,
      bookingData.guestName,
      bookingData.guestPhone || '',
      totalPrice * prepaymentPercentage,
      '–†—É—á–Ω–∞—è –±—Ä–æ–Ω—å',
      paymentType,
      prepaymentPercentage,
      totalPrice
    ]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
    try {
      // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const safeMessage = `
üè® –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï

üìã –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${bookingId}
üë§ –ì–æ—Å—Ç—å: ${bookingData.guestName || ''}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.guestPhone || ''}
üè† –ù–æ–º–µ—Ä: ${bookingData.roomId}
üìÖ –ó–∞–µ–∑–¥: ${checkInFormatted}
üìÖ –í—ã–µ–∑–¥: ${checkOutFormatted}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice} —Ä—É–±.
üí≥ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: ${paymentType === 'full' ? '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞' : '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'}
${paymentType === 'prepayment' ? `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã: ${(prepaymentPercentage * 100)}%` : ''}
üîñ –ò—Å—Ç–æ—á–Ω–∏–∫: –†—É—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      `.trim();
      
      sendTelegramMessage(safeMessage);
    } catch (telegramError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError);
    }

    return {
      success: true,
      bookingId: bookingId,
      message: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ'
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return {
      success: false,
      error: error.message
    };
  } finally {
    lock.releaseLock();
  }
}
function getFreeRooms(fromDate, toDate) {
  try {
    console.log('getFreeRooms –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { fromDate, toDate });
    
    if (!fromDate || !toDate) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã fromDate –∏–ª–∏ toDate');
      return [];
    }

    const lock = LockService.getScriptLock();
    lock.waitLock(30000);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–æ–≤
      const roomsSheet = getSheet(CONFIG.sheets.rooms);
      const calendarSheet = getSheet(CONFIG.sheets.calendar);
      const pricesSheet = getSheet(CONFIG.sheets.prices);

      const roomsData = roomsSheet.getDataRange().getValues();
      const calendarData = calendarSheet.getDataRange().getValues();
      const pricesData = pricesSheet.getDataRange().getValues();

      console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
        rooms: roomsData.length - 1,
        calendar: calendarData.length - 1,
        prices: pricesData.length - 1
      });

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
      const checkInDate = new Date(fromDate);
      const checkOutDate = new Date(toDate);
      
      if (isNaN(checkInDate.getTime()) || isNaN(checkOutDate.getTime())) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç');
      }

      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã:', {
        checkIn: checkInDate.toISOString(),
        checkOut: checkOutDate.toISOString()
      });

      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ü–µ–Ω
      const priceMap = {};
      for (let i = 1; i < pricesData.length; i++) {
        const priceRow = pricesData[i];
        const roomId = priceRow[0];
        const month = priceRow[1];
        
        if (!priceMap[roomId]) {
          priceMap[roomId] = {};
        }
        if (!priceMap[roomId][month]) {
          priceMap[roomId][month] = {};
        }
        
        // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏: –ü–Ω=2, –í—Ç=3, –°—Ä=4, –ß—Ç=5, –ü—Ç=6, –°–±=7, –í—Å=8
        const dayPrices = {
          1: getCorrectNumber(priceRow[2]), // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
          2: getCorrectNumber(priceRow[3]), // –í—Ç–æ—Ä–Ω–∏–∫
          3: getCorrectNumber(priceRow[4]), // –°—Ä–µ–¥–∞
          4: getCorrectNumber(priceRow[5]), // –ß–µ—Ç–≤–µ—Ä–≥
          5: getCorrectNumber(priceRow[6]), // –ü—è—Ç–Ω–∏—Ü–∞
          6: getCorrectNumber(priceRow[7]), // –°—É–±–±–æ—Ç–∞
          0: getCorrectNumber(priceRow[8])  // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        };
        
        priceMap[roomId][month] = dayPrices;
      }

      const freeRooms = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä
      for (let i = 1; i < roomsData.length; i++) {
        const roomRow = roomsData[i];
        const roomId = roomRow[0];
        const roomName = roomRow[1];
        const roomType = roomRow[2];

        if (!roomId || !roomName) {
          console.warn('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', roomRow);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–º–µ—Ä
        let isOccupied = false;
        
        for (let j = 1; j < calendarData.length; j++) {
          const calendarRow = calendarData[j];
          const bookedRoomId = calendarRow[0];
          const bookedFrom = calendarRow[1];
          const bookedTo = calendarRow[2];

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Ç–æ—Ç –Ω–æ–º–µ—Ä
          if (bookedRoomId != roomId) continue;

          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ "–Ω–µ —Å–¥–∞–µ—Ç—Å—è"
          const status = (calendarRow[7] || '').toString().toLowerCase();
          if (status.includes('–Ω–µ —Å–¥–∞–µ—Ç—Å—è')) continue;

          try {
            const bookedFromDate = new Date(bookedFrom);
            const bookedToDate = new Date(bookedTo);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∞—Ç
            if (checkInDate < bookedToDate && checkOutDate > bookedFromDate) {
              isOccupied = true;
              console.log(`–ù–æ–º–µ—Ä ${roomId} –∑–∞–Ω—è—Ç —Å ${bookedFromDate} –ø–æ ${bookedToDate}`);
              break;
            }
          } catch (dateError) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', dateError, calendarRow);
            continue;
          }
        }

        // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É
        if (!isOccupied) {
          let totalPrice = 0;
          let currentDate = new Date(checkInDate);

          while (currentDate < checkOutDate) {
            const month = currentDate.getMonth() + 1;
            const dayOfWeek = currentDate.getDay();
            
            if (priceMap[roomId] && priceMap[roomId][month]) {
              const dayPrice = priceMap[roomId][month][dayOfWeek] || 0;
              totalPrice += dayPrice;
            }
            
            currentDate.setDate(currentDate.getDate() + 1);
          }

          freeRooms.push({
            id: roomId,
            name: roomName,
            type: roomType,
            totalPrice: totalPrice
          });

          console.log(`–î–æ–±–∞–≤–ª–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä: ${roomId} (${roomName}) - ${totalPrice} —Ä—É–±.`);
        }
      }

      console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ${freeRooms.length}`);
      return freeRooms;

    } finally {
      lock.releaseLock();
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getFreeRooms:', error);
    throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ${error.message}`);
  }
}
/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
 */
function getFreeRoomsCount(fromDate, toDate) {
  try {
    const cache = CacheService.getScriptCache();
    const cacheKey = `free_rooms_${fromDate}_${toDate}`;
    const cached = cache.get(cacheKey);

    if (cached) {
      return parseInt(cached);
    }

    const freeRooms = getFreeRooms(fromDate, toDate);
    const count = freeRooms.length;

    cache.put(cacheKey, count.toString(), 300);
    return count;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getFreeRoomsCount:', error);
    return 0;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞
 */
function getAvailableRoomsForSelect() {
  const roomsSheet = getSheet(CONFIG.sheets.rooms);
  const roomsData = roomsSheet.getDataRange().getValues();

  const rooms = [];
  for (let i = 1; i < roomsData.length; i++) {
    if (!roomsData[i][0] || !roomsData[i][1]) continue;

    rooms.push({
      id: roomsData[i][0],
      name: roomsData[i][1],
      type: roomsData[i][2] || '–°—Ç–∞–Ω–¥–∞—Ä—Ç'
    });
  }

  return rooms.sort((a, b) => {
    if (a.type === b.type) {
      return a.name.localeCompare(b.name);
    }
    return a.type.localeCompare(b.type);
  });
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
 */
function batchGetData(requests) {
  const spreadsheet = SpreadsheetApp.openById(CONFIG.sheetId);
  const batchRequest = requests.map(req => ({
    spreadsheetId: CONFIG.sheetId,
    range: `${req.sheetName}!${req.range}`
  }));

  const response = Sheets.Spreadsheets.Values.batchGet(spreadsheet.getId(), {
    ranges: batchRequest.map(r => r.range)
  });

  return response.valueRanges.map(range => range.values || []);
}

function deleteBooking(guestName, phone, checkIn, checkOut, fullPrice) {
  try {
    console.log('Server deleteBooking called:', { guestName, phone, checkIn, checkOut, fullPrice });
    
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = spreadsheet.getSheetByName('–ö–∞–ª–µ–Ω–¥–∞—Ä—å');
    
    if (!sheet) {
      console.error('Sheet "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" not found');
      return { success: false, error: '–õ–∏—Å—Ç "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const data = sheet.getDataRange().getValues();
    console.log('Data from –ö–∞–ª–µ–Ω–¥–∞—Ä—å:', data.length, 'rows');
    
    // –ù–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    let deletedRowIndex = -1;
    for (let i = 1; i < data.length; i++) {
      const rowGuestName = data[i][4]; // –§–ò–û
      const rowPhone = data[i][5];     // —Ç–µ–ª–µ—Ñ–æ–Ω
      const rowCheckIn = data[i][1];   // –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
      const rowCheckOut = data[i][2];  // –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
      const rowPrice = data[i][6];     // —Å—É–º–º–∞
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD
      const formatDate = (date) => {
        if (date instanceof Date) {
          const year = date.getFullYear();
          const month = String(date.getMonth() + 1).padStart(2, '0');
          const day = String(date.getDate()).padStart(2, '0');
          return `${year}-${month}-${day}`;
        }
        return date ? date.toString() : '';
      };
      
      // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const phoneMatch = rowPhone.toString() === phone.toString();
      const checkInMatch = formatDate(rowCheckIn) === checkIn;
      const checkOutMatch = formatDate(rowCheckOut) === checkOut;
      const priceMatch = rowPrice.toString() === fullPrice.toString();
      const nameMatch = rowGuestName === guestName;
      
      console.log(`Row ${i} comparison:`, {
        nameMatch,
        phoneMatch,
        checkInMatch: `${formatDate(rowCheckIn)} === ${checkIn} = ${checkInMatch}`,
        checkOutMatch: `${formatDate(rowCheckOut)} === ${checkOut} = ${checkOutMatch}`,
        priceMatch: `${rowPrice} === ${fullPrice} = ${priceMatch}`
      });
      
      if (nameMatch && phoneMatch && checkInMatch && checkOutMatch && priceMatch) {
        sheet.deleteRow(i + 1);
        deletedRowIndex = i + 1;
        console.log('Deleted row:', deletedRowIndex);
        break;
      }
    }
    
    if (deletedRowIndex === -1) {
      console.log('Booking not found for deletion');
      return { success: false, error: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.' };
    }
    
    return { success: true, message: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${deletedRowIndex}` };
    
  } catch (error) {
    console.error('Server deleteBooking error:', error);
    return { success: false, error: error.toString() };
  }
}