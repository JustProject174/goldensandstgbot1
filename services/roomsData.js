const fs = require("fs").promises;
const Papa = require("papaparse");
const path = require("path");

let roomsData = [];

// –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ (–ø–æ ID)
// –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ example.com –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL –≤–∞—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const roomPhotos = {
    1: [
        "content/rooms/rooms_1/1.webp",
        "content/rooms/rooms_1/2.webp",
        "content/rooms/rooms_1/3.webp",
    ],
    2: [
        "content/rooms/rooms_2/1.webp",
        "content/rooms/rooms_2/2.webp",
        "content/rooms/rooms_2/3.webp",
    ],
    4: [
        "content/rooms/rooms_4/1.webp",
        "content/rooms/rooms_4/2.webp",
        "content/rooms/rooms_4/3.webp",
    ],

    6: [
        "content/rooms/rooms_6/1.webp",
        "content/rooms/rooms_6/2.webp",
        "content/rooms/rooms_6/3.webp",
    ],
    8: [
        "content/rooms/rooms_8/1.webp",
        "content/rooms/rooms_8/2.webp",
        "content/rooms/rooms_8/3.webp",
        "content/rooms/rooms_8/4.webp",
        "content/rooms/rooms_8/5.webp",
        "content/rooms/rooms_8/6.webp",
        "content/rooms/rooms_8/7.webp",
        "content/rooms/rooms_8/8.webp",
        "content/rooms/rooms_8/9.webp",
    ],
    9: [
        "content/rooms/rooms_9/1.webp",
        "content/rooms/rooms_9/2.webp",
        "content/rooms/rooms_9/3.webp",
        "content/rooms/rooms_9/4.webp",
        "content/rooms/rooms_9/5.webp",
        "content/rooms/rooms_9/6.webp",
        "content/rooms/rooms_9/7.webp",
        "content/rooms/rooms_9/8.webp",
        "content/rooms/rooms_9/9.webp",
        "content/rooms/rooms_9/10.webp",
    ],
    10: [
        "content/rooms/rooms_10/2.webp",
        "content/rooms/rooms_10/3.webp",
        "content/rooms/rooms_10/4.webp",
        "content/rooms/rooms_10/5.webp",
        "content/rooms/rooms_10/6.webp",
        "content/rooms/rooms_10/7.webp",
        "content/rooms/rooms_10/8.webp",
        "content/rooms/rooms_10/9.webp",
    ],
    11: [
        "content/rooms/rooms_11/1.webp",
        "content/rooms/rooms_11/2.webp",
        "content/rooms/rooms_11/3.webp",
    ],
    12: [
        "content/rooms/rooms_12/1.webp",
        "content/rooms/rooms_12/2.webp",
        "content/rooms/rooms_12/3.webp",
        "content/rooms/rooms_12/4.webp",
    ],
    13: [
        "content/rooms/rooms_13/1.webp",
        "content/rooms/rooms_13/2.webp",
        "content/rooms/rooms_13/3.webp",
    ],
    14: [
        "content/rooms/rooms_14/1.webp",
        "content/rooms/rooms_14/2.webp",
        "content/rooms/rooms_14/3.webp",
        "content/rooms/rooms_14/4.webp",
        "content/rooms/rooms_14/5.webp",
        "content/rooms/rooms_14/6.webp",
        "content/rooms/rooms_14/7.webp",
    ],
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function isValidImageUrl(url) {
    if (!url || typeof url !== "string") return false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ example.com –∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const isNotExample = !url.includes("example.com");
    const hasImageExtension = /\.(jpg|jpeg|png|gif|webp|bmp|svg)(\?.*)?$/i.test(
        url,
    );

    return isNotExample && hasImageExtension;
}

async function loadRoomsData() {
    try {
        const csvFilePath = path.join(__dirname, "../rooms/rooms.csv");

        const data = await fs.readFile(csvFilePath, "utf8");

        const parsed = Papa.parse(data, {
            header: true,
            skipEmptyLines: true,
            dynamicTyping: true,
            delimiter: ",",
            encoding: "UTF-8",
        });

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        roomsData = parsed.data.filter((room) => {
            return room && Object.keys(room).length > 1 && room.ID;
        });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É –ø–æ –µ–≥–æ ID
        roomsData = roomsData.map((room) => {
            // –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ —á–∏—Å–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const roomId = parseInt(room.ID);
            const photos = roomPhotos[roomId] || [];

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const validPhotos = photos.filter(isValidImageUrl);

            return {
                ...room,
                ID: roomId, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∫ —á–∏—Å–ª–æ
                photos: validPhotos,
                hasPhotos: validPhotos.length > 0,
            };
        });

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
        const roomsWithPhotos = roomsData.filter(
            (room) => room.hasPhotos,
        ).length;

        console.log(
            `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${roomsData.length} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞ (${roomsWithPhotos} —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏)`,
        );

        return roomsData;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CSV —Ñ–∞–π–ª–∞:", error);
        throw error;
    }
}

function getRoomsData() {
    return roomsData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–æ ID
function getRoomPhotos(roomId) {
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const numericId = parseInt(roomId);

    if (isNaN(numericId)) {
        console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–º–µ—Ä–∞: ${roomId}`);
        return [];
    }

    const photos = roomPhotos[numericId] || [];
    const validPhotos = photos.filter(isValidImageUrl);

    console.log(
        `–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${roomId} (–ø—Ä–∏–≤–µ–¥–µ–Ω –∫ ${numericId})`,
    );
    console.log(
        `–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photos.length}, –≤–∞–ª–∏–¥–Ω—ã—Ö: ${validPhotos.length}`,
    );

    if (validPhotos.length === 0) {
        console.warn(`‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${numericId}`);
    } else {
        console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:`, validPhotos);
    }

    return validPhotos;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
function getRoomById(roomId) {
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —á–∏—Å–ª—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const numericId = parseInt(roomId);

    if (isNaN(numericId)) {
        console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –Ω–æ–º–µ—Ä–∞: ${roomId}`);
        return null;
    }

    const room = roomsData.find((room) => room.ID === numericId);

    if (room) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä ${numericId}`);
        console.log(`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–æ–º–µ—Ä–∞ ${numericId}:`, room.photos);
        console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${room.photos.length}`);
        console.log(`–ï—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${room.hasPhotos}`);

        return room;
    } else {
        console.log(`‚ùå –ù–æ–º–µ—Ä ${numericId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.log(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:",
            roomsData.map((r) => r.ID),
        );
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
async function checkImageUrl(url) {
    try {
        const response = await fetch(url, { method: "HEAD" });
        const isValid =
            response.ok &&
            response.headers.get("content-type")?.startsWith("image/");
        console.log(
            `–ü—Ä–æ–≤–µ—Ä–∫–∞ URL ${url}: ${isValid ? "‚úÖ –¥–æ—Å—Ç—É–ø–µ–Ω" : "‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}`,
        );
        return isValid;
    } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL ${url}:`, error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function validateAllPhotos() {
    console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...");

    for (const [roomId, photos] of Object.entries(roomPhotos)) {
        console.log(`\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ ${roomId} ---`);

        for (let i = 0; i < photos.length; i++) {
            const url = photos[i];
            const isValid = await checkImageUrl(url);

            if (!isValid) {
                console.warn(
                    `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π ${i + 1} –Ω–æ–º–µ—Ä–∞ ${roomId}: ${url}`,
                );
            }
        }
    }

    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}

module.exports = {
    loadRoomsData,
    getRoomsData,
    getRoomPhotos,
    getRoomById,
    validateAllPhotos,
    isValidImageUrl,
};
