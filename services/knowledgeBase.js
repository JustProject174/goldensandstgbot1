const fs = require("fs").promises;
const path = require("path");
const config = require("../config");
const natural = require("natural");

let knowledgeBase = [];
let fileWatcher = null;
let isLoading = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Natural.js
const TfIdf = natural.TfIdf;
const tfidf = new TfIdf();
let semanticIndex = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
function buildSemanticIndex() {
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
    tfidf.documents = [];
    semanticIndex = [];

    knowledgeBase.forEach((item, index) => {
        if (item.answer && item.answer.trim()) {
            // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ + –æ—Ç–≤–µ—Ç
            const indexText = `${item.keywords.join(" ")} ${item.answer}`;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ TF-IDF
            tfidf.addDocument(indexText);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–æ–º –∏ –∑–∞–ø–∏—Å—å—é
            semanticIndex.push({
                originalIndex: index,
                text: indexText,
                item: item,
            });
        }
    });

    console.log(
        `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${semanticIndex.length} –∑–∞–ø–∏—Å–µ–π`,
    );
}

// –§—É–Ω–∫—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
function semanticSearch(query) {
    if (semanticIndex.length === 0) {
        console.log("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç");
        return null;
    }

    // –ü–æ–ª—É—á–∞–µ–º TF-IDF scores –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const scores = [];

    tfidf.tfidfs(query, (i, measure) => {
        if (measure > 0) {
            scores.push({
                index: i,
                score: measure,
                item: semanticIndex[i],
            });
        }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    scores.sort((a, b) => b.score - a.score);

    if (scores.length > 0) {
        const bestMatch = scores[0];
        console.log(
            `–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é ${bestMatch.score.toFixed(4)}`,
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞
        if (bestMatch.score > 43.0) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ 50 –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
            return bestMatch.item.item.answer;
        }
    }

    console.log("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
    return null;
}

async function loadKnowledgeBase() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
    if (isLoading) {
        console.log("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
        return knowledgeBase;
    }

    isLoading = true;

    try {
        const data = await fs.readFile(config.KNOWLEDGE_BASE_FILE, "utf8");
        const lines = data.split("\n");

        knowledgeBase = [];

        let i = 0;
        while (i < lines.length) {
            if (lines[i].startsWith("KEYWORDS:")) {
                const keywords = lines[i]
                    .replace("KEYWORDS:", "")
                    .split(",")
                    .map((k) => k.trim());
                i++;

                let answerLines = [];
                while (i < lines.length && !lines[i].startsWith("KEYWORDS:")) {
                    if (lines[i].startsWith("ANSWER:")) {
                        answerLines.push(
                            lines[i].replace("ANSWER:", "").trim(),
                        );
                    } else {
                        answerLines.push(lines[i]);
                    }
                    i++;
                }

                const answer = answerLines.join("\n").trim();
                knowledgeBase.push({ keywords, answer });
            } else {
                i++;
            }
        }

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${knowledgeBase.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π`);

        // –°—Ç—Ä–æ–∏–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        buildSemanticIndex();

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        if (!fileWatcher) {
            setupFileWatcher();
        }

        isLoading = false;
        return knowledgeBase;
    } catch (error) {
        console.log("–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –±–∞–∑—É");
        const result = await createInitialKnowledgeBase();
        isLoading = false;
        return result;
    }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
let reloadTimeout = null;

function setupFileWatcher() {
    if (fileWatcher) {
        fileWatcher.close();
    }

    try {
        fileWatcher = require("fs").watch(
            config.KNOWLEDGE_BASE_FILE,
            async (eventType, filename) => {
                if (eventType === "change" && !isLoading) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º debouncing —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–æ–∫
                    if (reloadTimeout) {
                        clearTimeout(reloadTimeout);
                    }

                    reloadTimeout = setTimeout(async () => {
                        console.log(
                            "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...",
                        );
                        await loadKnowledgeBase();
                    }, 1000); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
                }
            },
        );
        console.log("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error);
    }
}

async function createInitialKnowledgeBase() {
    console.log("–°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...");
    const initialData = `KEYWORDS:—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å,—Å–∫–æ–ª—å–∫–æ,–¥–µ–Ω—å–≥–∏
ANSWER:üí∞ –¶–µ–Ω—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:

üè† –ö–û–ú–§–û–†–¢
‚Ä¢ –î–æ–º ‚Ññ8 (4 —á–µ–ª.) ‚Äî –æ—Ç 9999‚ÇΩ
‚Ä¢ –î–æ–º ‚Ññ9/10 (6 —á–µ–ª.) ‚Äî –æ—Ç 10999‚ÇΩ
‚Ä¢ –î–æ–º ‚Ññ14 (–¥–æ 10+ —á–µ–ª.) ‚Äî –æ—Ç 21999‚ÇΩ

üõèÔ∏è –≠–ö–û–ù–û–ú
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ (4 —á–µ–ª.) ‚Äî –æ—Ç 4999‚ÇΩ
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ (5 —á–µ–ª.) ‚Äî –æ—Ç 5499‚ÇΩ

üë∂ –î–µ—Ç–∏ –¥–æ 5 –ª–µ—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ

KEYWORDS:–¥—É—à,—Ç—É–∞–ª–µ—Ç,—É–¥–æ–±—Å—Ç–≤–∞,–≤–∞–Ω–Ω–∞—è
ANSWER:üöø –£–¥–æ–±—Å—Ç–≤–∞:
‚Ä¢ –î—É—à–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö
‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —É–ª–∏—Ü–µ
‚Ä¢ –ë–æ–ª—å—à–æ–π –¥–∞—á–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏

üíß –ë–∞–∑–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–æ–π –∑–æ–Ω–µ, –ø–æ—ç—Ç–æ–º—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç

KEYWORDS:—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è,—á—Ç–æ –¥–µ–ª–∞—Ç—å,–¥–æ—Å—É–≥,–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
ANSWER:üèñ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
‚Ä¢ –ö—É–ø–∞–Ω–∏–µ –≤ –æ–∑–µ—Ä–µ
‚Ä¢ –†—É—Å—Å–∫–∞—è –±–∞–Ω—è —Å –ø–∞—Ä–µ–Ω–∏–µ–º ‚ùÑÔ∏è
‚Ä¢ –ü—Ä–æ–∫–∞—Ç:
  - –°–∞–ø–±–æ—Ä–¥ ‚Äî 1200‚ÇΩ/—á–∞—Å
  - –ë–∞–π–¥–∞—Ä–∫–∞
  - –õ–æ–¥–∫–∞
‚Ä¢ –ú–∞–Ω–≥–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å!

KEYWORDS:–ø–∞—Ä–∫–æ–≤–∫–∞,–º–∞—à–∏–Ω–∞,–∞–≤—Ç–æ,—Å—Ç–æ—è–Ω–∫–∞
ANSWER:üöó –ü–∞—Ä–∫–æ–≤–∫–∞:
‚Ä¢ –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ ‚Äî 500‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –ì–∞–∑–µ–ª—å ‚Äî 1000‚ÇΩ/—Å—É—Ç–∫–∏

üìç –í–æ–∑–º–æ–∂–µ–Ω –∑–∞–µ–∑–¥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ

KEYWORDS:—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä,–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è,–¥–æ–µ—Ö–∞—Ç—å
ANSWER:üöñ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏ –ø—Ä–æ–µ–∑–¥:
üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.1881079369311, 60.05969764417703

‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - —É—Ç–æ—á–Ω—è–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - —É—Ç–æ—á–Ω—è–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å

–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä"`;

    await fs.writeFile(config.KNOWLEDGE_BASE_FILE, initialData, "utf8");
    console.log("–ù–∞—á–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞");

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ loadKnowledgeBase
    const lines = initialData.split("\n");
    knowledgeBase = [];

    let i = 0;
    while (i < lines.length) {
        if (lines[i].startsWith("KEYWORDS:")) {
            const keywords = lines[i]
                .replace("KEYWORDS:", "")
                .split(",")
                .map((k) => k.trim());
            i++;

            let answerLines = [];
            while (i < lines.length && !lines[i].startsWith("KEYWORDS:")) {
                if (lines[i].startsWith("ANSWER:")) {
                    answerLines.push(lines[i].replace("ANSWER:", "").trim());
                } else {
                    answerLines.push(lines[i]);
                }
                i++;
            }

            const answer = answerLines.join("\n").trim();
            knowledgeBase.push({ keywords, answer });
        } else {
            i++;
        }
    }

    console.log(`–ù–∞—á–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç ${knowledgeBase.length} –∑–∞–ø–∏—Å–µ–π`);

    // –°—Ç—Ä–æ–∏–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    buildSemanticIndex();

    return knowledgeBase;
}

async function saveToKnowledgeBase(keywords, answer) {
    const keywordsStr = keywords.join(",");
    const newEntry = `\nKEYWORDS:${keywordsStr}\nANSWER:${answer}`;

    await fs.appendFile(config.KNOWLEDGE_BASE_FILE, newEntry, "utf8");

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å
    await loadKnowledgeBase();
    console.log("–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –±–∞–∑–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞");
    return knowledgeBase;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è —Å–ª–æ–≤–∞ (—É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ –µ—Å–ª–∏ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤)
function getWordRoot(word) {
    if (word.length <= 4) {
        return word;
    }
    return word.slice(0, -2);
}

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
function findAnswerByKeywords(message) {
    const lowerMessage = message.toLowerCase();

    // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const cleanMessage = lowerMessage
        .replace(/[^\w\s–∞-—è—ë]/gi, " ")
        .replace(/\s+/g, " ")
        .trim();
    const messageWords = cleanMessage
        .split(" ")
        .filter((word) => word.length > 3); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –º–µ–Ω—å—à–µ 3 —Å–∏–º–≤–æ–ª–æ–≤

    // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω—å—à–µ 1 –∑–Ω–∞—á–∏–º–æ–≥–æ —Å–ª–æ–≤–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (messageWords.length < 2) {
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${message}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤`);
        return { answer: null, relevance: 0 };
    }

    let bestMatch = null;
    let maxMatches = 0;
    let maxRelevanceScore = 0;

    for (const item of knowledgeBase) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if (
            !item.keywords ||
            item.keywords.length === 0 ||
            !item.answer ||
            item.answer.trim() === ""
        ) {
            continue;
        }

        let matchCount = 0;
        let relevanceScore = 0;
        const matchedKeywords = [];

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        for (const keyword of item.keywords) {
            if (!keyword || keyword.trim() === "") continue;

            const cleanKeyword = keyword.toLowerCase().trim();
            let keywordMatched = false;
            let currentRelevance = 0;

            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)
            if (cleanMessage.includes(cleanKeyword)) {
                matchCount++;
                matchedKeywords.push(cleanKeyword);
                keywordMatched = true;
                currentRelevance = cleanKeyword.length * 3; // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤–∞–∂–Ω–µ–µ
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤ –∏ –∫–æ—Ä–Ω–µ–π
                const keywordWords = cleanKeyword
                    .split(" ")
                    .filter((word) => word.length > 2);

                for (const keywordWord of keywordWords) {
                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if (keywordWord.length < 4) continue;

                    for (const messageWord of messageWords) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)
                        if (
                            keywordWord.length >= 4 &&
                            messageWord.length >= 4
                        ) {
                            if (
                                messageWord.includes(keywordWord) ||
                                keywordWord.includes(messageWord)
                            ) {
                                if (!keywordMatched) {
                                    matchCount++;
                                    matchedKeywords.push(cleanKeyword);
                                    keywordMatched = true;
                                    currentRelevance =
                                        Math.min(
                                            keywordWord.length,
                                            messageWord.length,
                                        ) * 2;
                                }
                                break;
                            }
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π —Å–ª–æ–≤ (—É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞)
                        if (
                            !keywordMatched &&
                            keywordWord.length > 4 &&
                            messageWord.length > 4
                        ) {
                            const keywordRoot = getWordRoot(keywordWord);
                            const messageRoot = getWordRoot(messageWord);

                            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –∫–æ—Ä–Ω—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                            if (
                                keywordRoot.length >= 4 &&
                                messageRoot.length >= 4 &&
                                (keywordRoot === messageRoot ||
                                    messageWord.includes(keywordRoot) ||
                                    keywordWord.includes(messageRoot))
                            ) {
                                matchCount++;
                                matchedKeywords.push(
                                    cleanKeyword + " (–∫–æ—Ä–µ–Ω—å)",
                                );
                                keywordMatched = true;
                                currentRelevance =
                                    Math.min(
                                        keywordRoot.length,
                                        messageRoot.length,
                                    ) * 0.7; // –ü–æ–Ω–∏–∂–∞–µ–º –≤–µ—Å –∫–æ—Ä–Ω–µ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                                break;
                            }
                        }
                    }
                    if (keywordMatched) break;
                }
            }

            relevanceScore += currentRelevance;
        }

        // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 1 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if (matchCount >= 1) {
            // –û—Ç–¥–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            // –∏–ª–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if (
                matchCount > maxMatches ||
                (matchCount === maxMatches &&
                    relevanceScore > maxRelevanceScore)
            ) {
                maxMatches = matchCount;
                maxRelevanceScore = relevanceScore;
                bestMatch = {
                    answer: item.answer,
                    matchedKeywords: matchedKeywords,
                    matchCount: matchCount,
                    relevanceScore: relevanceScore,
                };
            }
        }
    }

    if (bestMatch) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
        const basePercent =
            (bestMatch.matchCount / Math.max(1, messageWords.length)) * 33;

        // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
        const accuracyBonus = Math.min(
            20,
            bestMatch.relevanceScore / Math.max(1, bestMatch.matchCount),
        );

        const relevancePercent = Math.min(100, basePercent + accuracyBonus);

        console.log(
            `–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è "${message}" –ø–æ ${bestMatch.matchCount} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${bestMatch.matchedKeywords.join(", ")} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${bestMatch.relevanceScore}, –ø—Ä–æ—Ü–µ–Ω—Ç: ${relevancePercent.toFixed(1)}%)`,
        );

        return {
            answer: bestMatch.answer,
            relevance: relevancePercent,
        };
    }

    console.log(
        `–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}"`,
    );
    return { answer: null, relevance: 0 };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å —Ç—Ä–µ—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
function findAnswerInKnowledgeBase(message) {
    console.log(`–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}"`);

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–†–û–í–ï–†–ö–£ –ù–ê –ö–û–†–û–¢–ö–ò–ô –í–û–ü–†–û–° ===
    // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const cleanMessage = message
        .replace(/[^\w\s–∞-—è—ë]/gi, " ")
        .replace(/\s+/g, " ")
        .trim();
    const messageWords = cleanMessage.split(" ").filter((w) => w.length > 0);

    if (messageWords.length <= 2) {
        console.log("–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞");
        // –í–µ—Ä–Ω—É—Ç—å null ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –∞–¥–º–∏–Ω—É, –ª–∏–±–æ —Å—Ç—Ä–æ–∫—É-–æ—Ç–∫–∞–∑
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.";
        // return null; // <- –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∞–¥–º–∏–Ω—É
    }

    // 1. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Natural.js
    console.log("–≠—Ç–∞–ø 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...");
    const semanticResult = semanticSearch(message);
    if (semanticResult) {
        console.log("–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫");
        return semanticResult;
    }

    // 2. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    console.log("–≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...");
    const keywordResult = findAnswerByKeywords(message);
    if (keywordResult.answer) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if (keywordResult.relevance >= 50) {
            console.log(
                `–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å—é ${keywordResult.relevance.toFixed(1)}%`,
            );
            return keywordResult.answer;
        } else {
            console.log(
                `–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å ${keywordResult.relevance.toFixed(1)}% –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ 60%, –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`,
            );
            // 3. –ü–µ—Ä–µ–¥–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        }
    }

    // 3. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    console.log("–≠—Ç–∞–ø 3: –ü–µ—Ä–µ–¥–∞—á–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
function closeFileWatcher() {
    if (fileWatcher) {
        fileWatcher.close();
        fileWatcher = null;
        console.log("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ");
    }
}

module.exports = {
    loadKnowledgeBase,
    saveToKnowledgeBase,
    findAnswerInKnowledgeBase,
    getKnowledgeBase: () => knowledgeBase,
    closeFileWatcher,
};
