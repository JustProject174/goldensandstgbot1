const fs = require('fs').promises;
const path = require('path');
const config = require('../config');

let knowledgeBase = [];

async function loadKnowledgeBase() {
    try {
        const data = await fs.readFile(config.KNOWLEDGE_BASE_FILE, 'utf8');
        const lines = data.split('\n');

        knowledgeBase = [];

        let i = 0;
        while (i < lines.length) {
            if (lines[i].startsWith('KEYWORDS:')) {
                const keywords = lines[i].replace('KEYWORDS:', '').split(',').map(k => k.trim());
                i++;

                let answerLines = [];
                while (i < lines.length && !lines[i].startsWith('KEYWORDS:')) {
                    if (lines[i].startsWith('ANSWER:')) {
                        answerLines.push(lines[i].replace('ANSWER:', '').trim());
                    } else {
                        answerLines.push(lines[i]);
                    }
                    i++;
                }

                const answer = answerLines.join('\n').trim();
                knowledgeBase.push({ keywords, answer });
            } else {
                i++;
            }
        }

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${knowledgeBase.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π`);

        // –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö
        knowledgeBase.forEach((item, index) => {
            console.log(`–ó–∞–ø–∏—Å—å ${index + 1}: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ = [${item.keywords.join(', ')}], –µ—Å—Ç—å –æ—Ç–≤–µ—Ç = ${!!item.answer && item.answer.trim() !== ''}`);
        });

        return knowledgeBase;
    } catch (error) {
        console.log('–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –±–∞–∑—É');
        return await createInitialKnowledgeBase();
    }
}

async function createInitialKnowledgeBase() {
    const initialData = `KEYWORDS:—Ü–µ–Ω–∞,—Å—Ç–æ–∏–º–æ—Å—Ç—å,—Å–∫–æ–ª—å–∫–æ,–¥–µ–Ω—å–≥–∏
ANSWER:üí∞ –¶–µ–Ω—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:

üè† –ö–û–ú–§–û–†–¢
‚Ä¢ –î–æ–º ‚Ññ8 (4 —á–µ–ª.) ‚Äî –æ—Ç 9999‚ÇΩ
‚Ä¢ –î–æ–º ‚Ññ9/10 (6 —á–µ–ª.) ‚Äî –æ—Ç 10999‚ÇΩ
‚Ä¢ –î–æ–º ‚Ññ14 (–¥–æ 10+ —á–µ–ª.) ‚Äî –æ—Ç 21999‚ÇΩ

üõèÔ∏è –≠–ö–û–ù–û–ú
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ (4 —á–µ–ª.) ‚Äî –æ—Ç 4999‚ÇΩ
‚Ä¢ –ö–æ–º–Ω–∞—Ç–∞ (5 —á–µ–ª.) ‚Äî –æ—Ç 5499‚ÇΩ

üë∂ –î–µ—Ç–∏ –¥–æ 5 –ª–µ—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ

KEYWORDS:–¥—É—à,—Ç—É–∞–ª–µ—Ç,—É–¥–æ–±—Å—Ç–≤–∞,–≤–∞–Ω–Ω–∞—è
ANSWER:üöø –£–¥–æ–±—Å—Ç–≤–∞:
‚Ä¢ –î—É—à–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö
‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —É–ª–∏—Ü–µ
‚Ä¢ –ë–æ–ª—å—à–æ–π –¥–∞—á–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏

üíß –ë–∞–∑–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–æ–π –∑–æ–Ω–µ, –ø–æ—ç—Ç–æ–º—É —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç

KEYWORDS:—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è,—á—Ç–æ –¥–µ–ª–∞—Ç—å,–¥–æ—Å—É–≥,–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
ANSWER:üèñ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
‚Ä¢ –ö—É–ø–∞–Ω–∏–µ –≤ –æ–∑–µ—Ä–µ
‚Ä¢ –†—É—Å—Å–∫–∞—è –±–∞–Ω—è —Å –ø–∞—Ä–µ–Ω–∏–µ–º ‚ùÑÔ∏è
‚Ä¢ –ü—Ä–æ–∫–∞—Ç:
  - –°–∞–ø–±–æ—Ä–¥ ‚Äî 1200‚ÇΩ/—á–∞—Å
  - –ë–∞–π–¥–∞—Ä–∫–∞
  - –õ–æ–¥–∫–∞
‚Ä¢ –ú–∞–Ω–≥–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å!

KEYWORDS:–ø–∞—Ä–∫–æ–≤–∫–∞,–º–∞—à–∏–Ω–∞,–∞–≤—Ç–æ,—Å—Ç–æ—è–Ω–∫–∞
ANSWER:üöó –ü–∞—Ä–∫–æ–≤–∫–∞:
‚Ä¢ –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ ‚Äî 500‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –ì–∞–∑–µ–ª—å ‚Äî 1000‚ÇΩ/—Å—É—Ç–∫–∏

üìç –í–æ–∑–º–æ–∂–µ–Ω –∑–∞–µ–∑–¥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ

KEYWORDS:—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä,–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è,–¥–æ–µ—Ö–∞—Ç—å
ANSWER:üöñ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏ –ø—Ä–æ–µ–∑–¥:
üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 55.1881079369311, 60.05969764417703

‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - —É—Ç–æ—á–Ω—è–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä - —É—Ç–æ—á–Ω—è–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å

–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä"`;

    await fs.writeFile(config.KNOWLEDGE_BASE_FILE, initialData, 'utf8');
    return await loadKnowledgeBase();
}

async function saveToKnowledgeBase(keywords, answer) {
    const keywordsStr = keywords.join(',');
    const newEntry = `\nKEYWORDS:${keywordsStr}\nANSWER:${answer}`;

    await fs.appendFile(config.KNOWLEDGE_BASE_FILE, newEntry, 'utf8');

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å
    await loadKnowledgeBase();
    console.log('–ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –±–∞–∑–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    return knowledgeBase;
}

function findAnswerInKnowledgeBase(message) {
    const lowerMessage = message.toLowerCase();

    // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const cleanMessage = lowerMessage.replace(/[^\w\s–∞-—è—ë]/gi, ' ').replace(/\s+/g, ' ').trim();
    const messageWords = cleanMessage.split(' ').filter(word => word.length > 1); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π 1 —Å–∏–º–≤–æ–ª

    // –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–µ–Ω—å—à–µ 2 —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    if (messageWords.length < 2) {
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${message}" —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 2 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤`);
        return null;
    }

    let bestMatch = null;
    let maxMatches = 0;

    for (const item of knowledgeBase) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤
        if (!item.keywords || item.keywords.length === 0 || !item.answer || item.answer.trim() === '') {
            continue;
        }

        let matchCount = 0;
        const matchedKeywords = [];

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        for (const keyword of item.keywords) {
            if (!keyword || keyword.trim() === '') continue;

            const cleanKeyword = keyword.toLowerCase().trim();
            let keywordMatched = false;

            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            if (cleanMessage.includes(cleanKeyword)) {
                matchCount++;
                matchedKeywords.push(cleanKeyword);
                keywordMatched = true;
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Å–ª–æ–≤
                for (const keywordWord of keywordWords) {
                    for (const messageWord of messageWords) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–ª–æ–≤–∞ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
                        if (keywordWord.length >= 3 && messageWord.length >= 3) {
                            if (messageWord.includes(keywordWord) || keywordWord.includes(messageWord)) {
                                if (!keywordMatched) {
                                    matchCount++;
                                    matchedKeywords.push(cleanKeyword);
                                    keywordMatched = true;
                                }
                                break;
                            }

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–∏–µ–º –≤ 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—É–∫–≤–∞—Ö
                            if (keywordWord.length >= 4 && messageWord.length >= 4) {
                                const keywordBase = keywordWord.slice(0, -2);
                                const messageBase = messageWord.slice(0, -2);

                                // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤—ã —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞—é—Ç (–±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –±—É–∫–≤)
                                if (keywordBase.length >= 3 && keywordBase === messageBase) {
                                    if (!keywordMatched) {
                                        matchCount++;
                                        matchedKeywords.push(cleanKeyword);
                                        keywordMatched = true;
                                    }
                                    break;
                                }

                                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                                if (messageBase.length >= 3 && messageWord.slice(0, -2) === keywordWord.slice(0, -2)) {
                                    if (!keywordMatched) {
                                        matchCount++;
                                        matchedKeywords.push(cleanKeyword);
                                        keywordMatched = true;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (keywordMatched) break;
                }
            }
        }

        // –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (matchCount >= 2 && matchCount > maxMatches) {
            maxMatches = matchCount;
            bestMatch = {
                answer: item.answer,
                matchedKeywords: matchedKeywords,
                matchCount: matchCount
            };
        }
    }

    if (bestMatch) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è "${message}" –ø–æ ${bestMatch.matchCount} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${bestMatch.matchedKeywords.join(', ')}`);
        return bestMatch.answer;
    }

    console.log(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: "${message}" (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)`);
    return null;
}

module.exports = {
    loadKnowledgeBase,
    saveToKnowledgeBase,
    findAnswerInKnowledgeBase,
    getKnowledgeBase: () => knowledgeBase
};