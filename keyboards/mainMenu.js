module.exports = {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    escapeHtml(text) {
        if (!text) return "";
        return text
            .toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#x27;");
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    formatSafeMessage(text, parseMode = "HTML") {
        if (parseMode === "HTML") {
            // –£–±–∏—Ä–∞–µ–º parse_mode –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å HTML
            return {
                text: this.escapeHtml(text),
                parse_mode: undefined,
            };
        }
        return {
            text: text,
            parse_mode: parseMode,
        };
    },

    getMainMenuKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üìå –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                            callback_data: "important_info",
                        },
                    ],
                    [
                        {
                            text: "üè† –ù–æ–º–µ—Ä–∞ –∏ —Ü–µ–Ω—ã",
                            callback_data: "rooms",
                        },
                    ],
                    [
                        {
                            text: "üèñ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                            callback_data: "entertainment",
                        },
                    ],
                    [
                        {
                            text: "üçΩÔ∏è –£–¥–æ–±—Å—Ç–≤–∞",
                            callback_data: "facilities",
                        },
                    ],
                    [
                        {
                            text: "‚õ∫ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏",
                            callback_data: "camping",
                        },
                    ],
                    [
                        {
                            text: "üèñÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø–ª—è–∂–∞",
                            callback_data: "our_beach",
                        },
                    ],
                    [
                        {
                            text: "üçñ –ê—Ä–µ–Ω–¥–∞ –º–∞–Ω–≥–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã",
                            callback_data: "Mangalchik",
                        },
                    ],
                    [
                        {
                            text: "üìç –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è",
                            callback_data: "directions",
                        },
                    ],
                    [
                        {
                            text: "üìû –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            callback_data: "booking",
                        },
                    ],
                ],
            },
        };
    },

    getBackToMenuKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data: "back_to_menu",
                        },
                    ],
                ],
            },
        };
    },

    getBookingKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚úÖ –î–∞, –±—ã–ª(–∞)",
                            callback_data: "booking_yes",
                        },
                    ],
                    [
                        {
                            text: "‚ùå –ù–µ—Ç, –≤–ø–µ—Ä–≤—ã–µ",
                            callback_data: "booking_no",
                        },
                    ],
                    [
                        {
                            text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data: "back_to_menu",
                        },
                    ],
                ],
            },
        };
    },

    getRoomsKeyboard(roomsData) {
        const keyboard = [];
        if (roomsData && Array.isArray(roomsData)) {
            roomsData.forEach((room, index) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
                const roomName =
                    room?.–ù–∞–∑–≤–∞–Ω–∏–µ || room?.–Ω–∞–∑–≤–∞–Ω–∏–µ || `–ù–æ–º–µ—Ä ${index + 1}`;
                const safeRoomName = this.escapeHtml(roomName);

                keyboard.push([
                    {
                        text: `üè† ${safeRoomName}`,
                        callback_data: `room_${index}`,
                    },
                ]);
            });
        }
        keyboard.push([
            {
                text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "back_to_menu",
            },
        ]);

        return {
            reply_markup: {
                inline_keyboard: keyboard,
            },
        };
    },

    getRoomDetailsKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üìû –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å",
                            callback_data: "booking",
                        },
                    ],
                    [
                        {
                            text: "üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤",
                            callback_data: "rooms",
                        },
                    ],
                    [
                        {
                            text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data: "back_to_menu",
                        },
                    ],
                ],
            },
        };
    },

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    getAdminKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üìã –û–∂–∏–¥–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
                            callback_data: "pending_questions",
                        },
                        {
                            text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                            callback_data: "admin_stats",
                        },
                    ],
                    [
                        {
                            text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                            callback_data: "admin_settings",
                        },
                        {
                            text: "üìù –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π",
                            callback_data: "knowledge_base",
                        },
                    ],
                    [
                        {
                            text: "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data: "back_to_menu",
                        },
                    ],
                ],
            },
        };
    },

    getAnswerManagementKeyboard(userId) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å",
                            callback_data: `answer_question_${userId}`,
                        },
                        {
                            text: "‚ùå –£–¥–∞–ª–∏—Ç—å",
                            callback_data: `delete_question_${userId}`,
                        },
                    ],
                    [
                        {
                            text: "üîô –ö –≤–æ–ø—Ä–æ—Å–∞–º",
                            callback_data: "pending_questions",
                        },
                    ],
                ],
            },
        };
    },

    getPendingQuestionsKeyboard(questions) {
        const keyboard = [];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ (–º–∞–∫—Å–∏–º—É–º 8-10)
        let count = 0;
        if (questions && questions.size > 0) {
            for (const [userId, questionData] of questions) {
                if (count >= 8) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫

                const question = questionData?.question || "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞";
                const questionPreview =
                    question.length > 30
                        ? question.substring(0, 30) + "..."
                        : question;

                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                const safePreview = this.escapeHtml(questionPreview);

                keyboard.push([
                    {
                        text: `‚ùì ${safePreview}`,
                        callback_data: `view_question_${userId}`,
                    },
                ]);
                count++;
            }
        }

        if (!questions || questions.size === 0) {
            keyboard.push([
                {
                    text: "üì≠ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                    callback_data: "no_questions",
                },
            ]);
        }

        keyboard.push([
            {
                text: "üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                callback_data: "admin_menu",
            },
        ]);
        keyboard.push([
            {
                text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data: "back_to_menu",
            },
        ]);

        return {
            reply_markup: {
                inline_keyboard: keyboard,
            },
        };
    },

    getConfirmationKeyboard(actionType, data = "") {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "‚úÖ –î–∞",
                            callback_data: `confirm_${actionType}_${data}`,
                        },
                        {
                            text: "‚ùå –ù–µ—Ç",
                            callback_data: `cancel_${actionType}_${data}`,
                        },
                    ],
                ],
            },
        };
    },

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏)
    removeKeyboard() {
        return {
            reply_markup: {
                remove_keyboard: true,
            },
        };
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    createSafeMessage(text, keyboard = null, parseMode = null) {
        const message = {
            text: parseMode === "HTML" ? text : this.escapeHtml(text),
        };

        if (parseMode && parseMode !== "HTML") {
            message.parse_mode = parseMode;
        }

        if (keyboard) {
            message.reply_markup = keyboard.reply_markup || keyboard;
        }

        return message;
    },
};
