module.exports = {
    getAdminKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
                    [{ text: 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', callback_data: 'admin_kb' }],
                    [{ text: '‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ', callback_data: 'admin_pending' }],
                    [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', callback_data: 'admin_reload' }],
                    [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
            }
        };
    },

    getBackToAdminKeyboard() {
        return {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
                ]
            }
        };
    },

    getPendingQuestionsListKeyboard(pendingQuestions) {
        const keyboard = [];
        
        let count = 1;
        for (const [userId, questionData] of pendingQuestions) {
            if (count > 8) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫
            
            const preview = questionData.question.length > 30 
                ? questionData.question.substring(0, 30) + '...'
                : questionData.question;
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ userId –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            keyboard.push([{ 
                text: `‚ùì ${count}. ${preview}`, 
                callback_data: `view_question_${userId.toString()}` 
            }]);
            count++;
        }
        
        keyboard.push([{ text: 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }]);
        
        return {
            reply_markup: {
                inline_keyboard: keyboard
            }
        };
    },

    getQuestionManagementKeyboard(userId) {
        return {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å', callback_data: `answer_btn_${userId.toString()}` },
                        { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: `reject_btn_${userId.toString()}` }
                    ],
                    [
                        { text: 'üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤', callback_data: 'admin_pending' }
                    ]
                ]
            }
        };
    }
};