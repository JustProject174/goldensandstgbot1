const mainMenuKeyboards = require("../keyboards/mainMenu");
const roomsKeyboards = require("../keyboards/rooms");
const utils = require("../utils");
const states = require("../states");
const bookingModule = require("../services/bookingModule");
const { getBookingSession, saveBookingSession, deleteBookingSession } = require("../services/supabase");
const logger = require("../logger");
const services = {
    knowledgeBase: require("../services/knowledgeBase"),
    roomsData: require("../services/roomsData"),
    adminAnswers: require("../services/adminAnswers"),
};

module.exports = function setupMainMenuHandlers(bot, userStates) {
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function parseDate(dateStr) {
        const match = dateStr.match(/^(\d{2})\.(\d{2})\.(\d{4})$/) ||
                     dateStr.match(/^(\d{2})\/(\d{2})\/(\d{4})$/);
        if (!match) return null;
        const [, day, month, year] = match;
        const date = new Date(`${year}-${month}-${day}`);
        return isNaN(date) ? null : date;
    }

    function formatDateForDisplay(date) {
        const d = new Date(date);
        return `${String(d.getDate()).padStart(2, '0')}.${String(d.getMonth() + 1).padStart(2, '0')}.${d.getFullYear()}`;
    }

    function formatDateForGAS(date) {
        const d = new Date(date);
        return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;
    }

    function isValidEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    }

    function calculateTotalPrice(pricePerDay, checkIn, checkOut) {
        const nights = Math.ceil((new Date(checkOut) - new Date(checkIn)) / (1000 * 60 * 60 * 24));
        let total = 0;
        let currentDate = new Date(checkIn);
        while (currentDate < new Date(checkOut)) {
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            const day = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'][currentDate.getDay()];
            const key = `${month}${day}`;
            total += pricePerDay[key] || 0;
            currentDate.setDate(currentDate.getDate() + 1);
        }
        return total;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text;

        // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
        if (text.startsWith('/')) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (userStates.get(userId) !== states.BOOKING_PROCESS) return;

        try {
            logger.info(`Processing message for user ${userId} in chat ${chatId}: ${text}`);
            const { data: session, error } = await getBookingSession(chatId);
            if (error || !session) {
                logger.error(`Booking session not found for chat ${chatId}`, { error });
                await utils.safeSendMessage(bot, chatId, '‚ùå –°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
                userStates.set(userId, states.MAIN_MENU);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
            if (new Date(session.updated_at) < new Date(Date.now() - 24 * 60 * 60 * 1000)) {
                logger.warn(`Booking session expired for chat ${chatId}`);
                await deleteBookingSession(chatId);
                await utils.safeSendMessage(bot, chatId, '‚ùå –°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
                userStates.set(userId, states.MAIN_MENU);
                return;
            }

            let bookingData = session.data || {};

            if (session.step === 'checkIn') {
                const checkIn = parseDate(text);
                if (!checkIn) {
                    logger.warn(`Invalid check-in date format for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                if (checkIn < new Date().setHours(0, 0, 0, 0)) {
                    logger.warn(`Check-in date in the past for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                bookingData.checkIn = formatDateForGAS(checkIn);
                await saveBookingSession(chatId, 'checkOut', bookingData);
                logger.info(`Check-in date saved for chat ${chatId}: ${bookingData.checkIn}`);
                await utils.safeSendMessage(bot, chatId, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
            } else if (session.step === 'checkOut') {
                const checkOut = parseDate(text);
                if (!checkOut || checkOut <= new Date(bookingData.checkIn)) {
                    logger.warn(`Invalid check-out date for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∑–∂–µ –∑–∞–µ–∑–¥–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                bookingData.checkOut = formatDateForGAS(checkOut);

                const rooms = await bookingModule.getAvailableRooms(bookingData.checkIn, bookingData.checkOut);
                if (!rooms || rooms.length === 0) {
                    logger.warn(`No available rooms for dates ${bookingData.checkIn} to ${bookingData.checkOut} for chat ${chatId}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    await deleteBookingSession(chatId);
                    userStates.set(userId, states.MAIN_MENU);
                    return;
                }

                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ services.roomsData
                const localRooms = services.roomsData.getRoomsData();
                const filteredRooms = rooms.filter(googleRoom =>
                    localRooms.some(localRoom => localRoom.ID === googleRoom.id)
                );

                if (filteredRooms.length === 0) {
                    logger.warn(`No matching rooms in local data for chat ${chatId}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    await deleteBookingSession(chatId);
                    userStates.set(userId, states.MAIN_MENU);
                    return;
                }

                let roomList = 'üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n';
                filteredRooms.forEach((room, index) => {
                    const localRoom = localRooms.find(lr => lr.ID === room.id);
                    roomList += `${index + 1}. ${mainMenuKeyboards.escapeHtml(room.name)} (${room.type}, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${room.capacity}${localRoom && localRoom.–¶–µ–Ω–∞ ? `, —Ü–µ–Ω–∞ –æ—Ç ${localRoom.–¶–µ–Ω–∞} ‚ÇΩ/–Ω–æ—á—å` : ''})\n`;
                });
                roomList += '\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞):';

                bookingData.rooms = filteredRooms;
                await saveBookingSession(chatId, 'roomSelection', bookingData);
                logger.info(`Available rooms sent to chat ${chatId}, count: ${filteredRooms.length}`);
                await utils.safeSendMessage(bot, chatId, roomList, {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
            } else if (session.step === 'roomSelection') {
                const roomIndex = parseInt(text) - 1;
                if (isNaN(roomIndex) || roomIndex < 0 || roomIndex >= bookingData.rooms.length) {
                    logger.warn(`Invalid room selection for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                bookingData.roomId = bookingData.rooms[roomIndex].id;
                await saveBookingSession(chatId, 'guestName', bookingData);
                logger.info(`Room selected for chat ${chatId}: roomId ${bookingData.roomId}`);
                await utils.safeSendMessage(bot, chatId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
            } else if (session.step === 'guestName') {
                bookingData.guestName = text.trim();
                if (!bookingData.guestName) {
                    logger.warn(`Empty guest name for chat ${chatId}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                await saveBookingSession(chatId, 'guestEmail', bookingData);
                logger.info(`Guest name saved for chat ${chatId}: ${bookingData.guestName}`);
                await utils.safeSendMessage(bot, chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
            } else if (session.step === 'guestEmail') {
                if (!isValidEmail(text)) {
                    logger.warn(`Invalid email format for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                bookingData.guestEmail = text.trim();
                await saveBookingSession(chatId, 'guestPhone', bookingData);
                logger.info(`Guest email saved for chat ${chatId}: ${bookingData.guestEmail}`);
                await utils.safeSendMessage(bot, chatId, 'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                });
            } else if (session.step === 'guestPhone') {
                bookingData.guestPhone = text.trim();
                if (!/^\+?\d{10,15}$/.test(bookingData.guestPhone.replace(/\s/g, ''))) {
                    logger.warn(`Invalid phone format for chat ${chatId}: ${text}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    return;
                }
                await saveBookingSession(chatId, 'paymentType', bookingData);
                logger.info(`Guest phone saved for chat ${chatId}: ${bookingData.guestPhone}`);
                await utils.safeSendMessage(
                    bot,
                    chatId,
                    'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã:\n1. –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n2. –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%',
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞', callback_data: 'payment_full' }],
                                [{ text: '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%', callback_data: 'payment_prepayment' }]
                            ]
                        }
                    }
                );
            }
        } catch (error) {
            logger.error(`Error processing message for chat ${chatId}`, { error });
            await utils.safeSendMessage(
                bot,
                chatId,
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
            await deleteBookingSession(chatId);
            userStates.set(userId, states.MAIN_MENU);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    bot.on("callback_query", async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        try {
            await bot.answerCallbackQuery(callbackQuery.id);
            logger.info(`Callback query received for chat ${chatId}: ${data}`);

            if (data === 'payment_full' || data === 'payment_prepayment') {
                const { data: session, error } = await getBookingSession(chatId);
                if (error || !session || session.step !== 'paymentType') {
                    logger.warn(`Invalid or expired booking session for payment selection in chat ${chatId}`);
                    await utils.safeSendMessage(bot, chatId, '‚ùå –°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    });
                    userStates.set(userId, states.MAIN_MENU);
                    return;
                }

                let bookingData = session.data || {};
                const paymentType = data === 'payment_full' ? 'full' : 'prepayment';
                bookingData.paymentType = paymentType;

                const nights = Math.ceil((new Date(bookingData.checkOut) - new Date(bookingData.checkIn)) / (1000 * 60 * 60 * 24));
                const room = bookingData.rooms.find(r => r.id === bookingData.roomId);
                const localRoom = services.roomsData.getRoomById(bookingData.roomId);
                bookingData.nights = nights;
                bookingData.totalPrice = localRoom && localRoom.–¶–µ–Ω–∞ ? localRoom.–¶–µ–Ω–∞ * nights : calculateTotalPrice(room.pricePerDay || {}, bookingData.checkIn, bookingData.checkOut);

                const bookingResult = await bookingModule.createBooking(bookingData);
                logger.info(`Booking created for chat ${chatId}: bookingNumber ${bookingResult.bookingNumber}, amount ${bookingResult.paymentAmount}`);

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                await utils.forwardToAdmins(
                    bot,
                    userId,
                    callbackQuery.from.username,
                    `–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ${bookingResult.bookingNumber} –æ—Ç ${bookingData.guestName} –Ω–∞ –¥–∞—Ç—ã ${formatDateForDisplay(bookingData.checkIn)} - ${formatDateForDisplay(bookingData.checkOut)}`
                );
                logger.info(`Admin notification sent for booking ${bookingResult.bookingNumber}`);

                await utils.safeSendMessage(
                    bot,
                    chatId,
                    `‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${bookingResult.bookingNumber}\n–°—É–º–º–∞: ${bookingResult.paymentAmount} ‚ÇΩ\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n[${paymentType === 'prepayment' ? '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞' : '–ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞'}](${bookingResult.paymentUrl})\n\n–î–∞—Ç—ã: ${formatDateForDisplay(bookingData.checkIn)} - ${formatDateForDisplay(bookingData.checkOut)}`,
                    {
                        parse_mode: 'Markdown',
                        ...mainMenuKeyboards.getBackToMenuKeyboard()
                    }
                );

                await deleteBookingSession(chatId);
                userStates.set(userId, states.MAIN_MENU);

                setTimeout(async () => {
                    try {
                        const status = await bookingModule.checkPaymentStatus(bookingResult.bookingId);
                        logger.info(`Payment status checked for booking ${bookingResult.bookingId}: ${status.status}`);
                        if (status.status === 'paid') {
                            await utils.safeSendMessage(
                                bot,
                                chatId,
                                `üéâ –û–ø–ª–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ${bookingResult.bookingNumber} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!`,
                                {
                                    parse_mode: 'Markdown',
                                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                                }
                            );
                        } else if (status.status === 'expired') {
                            await utils.safeSendMessage(
                                bot,
                                chatId,
                                `‚è∞ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ${bookingResult.bookingNumber} –∏—Å—Ç–µ–∫–ª–æ.`,
                                {
                                    parse_mode: 'Markdown',
                                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                                }
                            );
                        }
                    } catch (error) {
                        logger.error(`Error checking payment status for booking ${bookingResult.bookingId}`, { error });
                    }
                }, 5 * 60 * 1000);
                return;
            }

            switch (data) {
                case "important_info":
                    await handleImportantInfo(bot, chatId);
                    break;
                case "rooms":
                    const roomsData = services.roomsData.getRoomsData();
                    logger.info(`Displaying rooms for chat ${chatId}, count: ${roomsData.length}`);
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä:",
                        mainMenuKeyboards.getRoomsKeyboard(roomsData)
                    );
                    break;
                case "entertainment":
                    await handleEntertainment(bot, chatId);
                    break;
                case "facilities":
                    await handleFacilities(bot, chatId);
                    break;
                case "camping":
                    await handleCamping(bot, chatId);
                    break;
                case "our_beach":
                    await handleOur_beach(bot, chatId);
                    break;
                case "Mangalchik":
                    await handleMangalchik(bot, chatId);
                    break;
                case "directions":
                    await handleDirections(bot, chatId);
                    break;
                case "booking":
                    userStates.set(userId, states.BOOKING_PROCESS);
                    logger.info(`Started booking process for chat ${chatId}`);
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        "–ë—ã–ª–∏ –ª–∏ –≤—ã —É –Ω–∞—Å?",
                        mainMenuKeyboards.getBookingKeyboard()
                    );
                    break;
                case "back_to_menu":
                    userStates.set(userId, states.MAIN_MENU);
                    logger.info(`Returned to main menu for chat ${chatId}`);
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:",
                        mainMenuKeyboards.getMainMenuKeyboard()
                    );
                    break;
                case "booking_yes":
                    await handleBookingYes(bot, chatId);
                    break;
                case "booking_no":
                    await handleBookingNo(bot, chatId);
                    break;
                default:
                    if (data.startsWith("room_")) {
                        await handleRoomDetails(bot, chatId, data);
                    }
                    break;
            }
        } catch (error) {
            logger.error(`Error processing callback query for chat ${chatId}: ${data}`, { error });
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
            } catch (answerError) {
                logger.error(`Failed to answer callback query for chat ${chatId}`, { answerError });
            }
            await utils.safeSendMessage(
                bot,
                chatId,
                `‚ùå –û—à–∏–±–∫–∞: ${error.message}`,
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    bot.onText(/\/checkpayment (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const bookingId = match[1];
        try {
            logger.info(`Checking payment status for booking ${bookingId} in chat ${chatId}`);
            const status = await bookingModule.checkPaymentStatus(bookingId);
            await utils.safeSendMessage(
                bot,
                chatId,
                `–°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${status.status}`,
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
        } catch (error) {
            logger.error(`Error checking payment status for booking ${bookingId} in chat ${chatId}`, { error });
            await utils.safeSendMessage(
                bot,
                chatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`,
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
    bot.onText(/\/cancel/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        logger.info(`Cancel command received for chat ${chatId}`);
        await deleteBookingSession(chatId);
        userStates.set(userId, states.MAIN_MENU);
        await utils.safeSendMessage(
            bot,
            chatId,
            '‚ùå –ü—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.',
            {
                parse_mode: 'Markdown',
                ...mainMenuKeyboards.getMainMenuKeyboard()
            }
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        userStates.set(userId, states.MAIN_MENU);
        logger.info(`Start command received for chat ${chatId}`);

        const welcomeMessage = `üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∞–∑—É –æ—Ç–¥—ã—Ö–∞ "–ó–æ–ª–æ—Ç—ã–µ –ü–µ—Å–∫–∏" –æ–∑. –¢—É—Ä–≥–æ—è–∫ üå≤üè°

–ú–µ–Ω—è –∑–æ–≤—É—Ç –Æ–ª–∏—è, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º —Å –ø–æ–¥–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.

üìç –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º, –ø—Ä–æ—á—Ç–∏—Ç–µ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–µ!

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`;

        await utils.safeSendMessage(bot, chatId, welcomeMessage, {
            parse_mode: "Markdown",
            ...mainMenuKeyboards.getMainMenuKeyboard(),
        });

        if (await utils.isAdmin(bot, userId)) {
            logger.info(`Admin panel accessed for user ${userId} in chat ${chatId}`);
            await utils.safeSendMessage(
                bot,
                chatId,
                "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞",
                {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                                    callback_data: "admin_panel",
                                },
                            ],
                        ],
                    },
                },
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    bot.onText(/–º–µ–Ω—é|menu/i, async (msg) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        userStates.set(userId, states.MAIN_MENU);
        logger.info(`Menu command received for chat ${chatId}`);
        await utils.safeSendMessage(
            bot,
            chatId,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            mainMenuKeyboards.getMainMenuKeyboard(),
        );
    });

    async function handleBookingYes(bot, chatId) {
        try {
            logger.info(`Starting booking process (booking_yes) for chat ${chatId}`);
            await saveBookingSession(chatId, 'checkIn', {});
            userStates.set(chatId, states.BOOKING_PROCESS);
            await utils.safeSendMessage(
                bot,
                chatId,
                'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):',
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
        } catch (error) {
            logger.error(`Error in handleBookingYes for chat ${chatId}`, { error });
            await utils.safeSendMessage(
                bot,
                chatId,
                '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                {
                    parse_mode: 'Markdown',
                    ...mainMenuKeyboards.getBackToMenuKeyboard()
                }
            );
            userStates.set(chatId, states.MAIN_MENU);
        }
    }

    async function handleImportantInfo(bot, chatId) {
        try {
            logger.info(`Sending important info to chat ${chatId}`);
            await bot.sendDocument(
                chatId,
                "./–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–¥—ã—Ö–∞.docx.pdf",
                {
                    caption: "–ü—Ä–æ—à—É –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                },
            );

            await bot.sendPhoto(
                chatId,
                "content/importantinfo/Important1.png.webp",
                {
                    caption: `üìå –ù–∞—à–∞ –±–∞–∑–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–æ–π –∑–æ–Ω–µ.
    üíß –í —Ü–µ–ª—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏–∏:
    ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    ‚Ä¢ –î—É—à–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö (–∫–∞–∫ –¥–ª—è –ø–æ–º—ã–≤–∫–∏, —Ç–∞–∫ –∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞)
    ‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —É–ª–∏—Ü–µ
    üßª –ë–æ–ª—å—à–æ–π –¥–∞—á–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
    
    ü¶ü *–ü—Ä–æ—Ç–∏–≤–æ–∫–ª–µ—â–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:*
    ‚Ä¢ –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –±–∞–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∫–ª–µ—â–µ–π.  
    ‚Ä¢ –û–¥–Ω–∞–∫–æ –º—ã *—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –∑–∞—â–∏—Ç–Ω—ã–µ –∞—ç—Ä–æ–∑–æ–ª–∏* –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    üí∞ –°–∫–∏–¥–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:  
    ‚Ä¢ –°–∫–∏–¥–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏  
    ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ (–æ—Ç 5 –¥–Ω–µ–π) - –±–∞–Ω—è –≤ –ø–æ–¥–∞—Ä–æ–∫ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞.
    ‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏  
    –ö–∞–∫–∏–µ –ª–∏–±–æ –ª—å–≥–æ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –ª—é–¥–µ–π –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã. 
    
    –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç, –¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ üòä
    
    –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`,
                    parse_mode: "Markdown",
                    ...mainMenuKeyboards.getBackToMenuKeyboard(),
                },
            );
        } catch (error) {
            logger.error(`Error sending important info to chat ${chatId}`, { error });
            await utils.safeSendMessage(
                bot,
                chatId,
                `üìå –ù–∞—à–∞ –±–∞–∑–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–æ–π –∑–æ–Ω–µ.
    üíß –í —Ü–µ–ª—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏–∏:
    ‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    ‚Ä¢ –î—É—à–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö (–∫–∞–∫ –¥–ª—è –ø–æ–º—ã–≤–∫–∏, —Ç–∞–∫ –∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞)
    ‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —É–ª–∏—Ü–µ
    üßª –ë–æ–ª—å—à–æ–π –¥–∞—á–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
    üë∂ –î–µ—Ç–∏ –¥–æ 5 –ª–µ—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–µ—Å–ª–∏ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞)
    –ï—Å–ª–∏ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç, –¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ üòä
    –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:
    –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.`,
                {
                    parse_mode: "Markdown",
                    ...mainMenuKeyboards.getBackToMenuKeyboard(),
                },
            );
        }
    }

    async function handleCamping(bot, chatId) {
        const photos = [
            "content/camping/1.webp",
            "content/camping/2.webp",
            "content/camping/3.webp",
            "content/camping/4.webp",
            "content/camping/6.webp",
            "content/camping/7.jfif",
            "content/camping/8.jfif",
        ];

        const message = `–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏:
            —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ –∫–µ–º–ø–∏–Ω–≥–∞, –≥–¥–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–µ–π –ø–∞–ª–∞—Ç–∫–æ–π. –≠—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –±–∞–∑—ã, –Ω–æ –ø–∞–ª–∞—Ç–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ —Å –¥–æ–º–∏–∫–∞–º–∏ –Ω–µ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è.
        üìç *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*  
        –ù–∞ —Å–∞–º–æ–º –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞ –¢—É—Ä–≥–æ—è–∫, —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –±—É—Ö—Ç—É, —à–∏–∫–∞—Ä–Ω—ã–º –ø–µ—Å—á–∞–Ω—ã–º –ø–ª—è–∂–µ–º –∏ –≤–∏–¥–æ–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤ –í–µ—Ä—ã.  
        üîπ –ó–∞–µ–∑–¥: 50 –º –æ—Ç –∫—Ä–∞—Å–Ω—ã—Ö –≤–æ—Ä–æ—Ç ‚Äî –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞–ª–µ–≤–æ –ø–æ —Å–∏–Ω–µ–º—É —É–∫–∞–∑–∞—Ç–µ–ª—é ¬´–ö–µ–º–ø–∏–Ω–≥ –ó–æ–ª–æ—Ç—ã–µ –ø–µ—Å–∫–∏¬ª.
        üöó *–ü–∞—Ä–∫–æ–≤–∫–∞:*  
        ‚Äî –ú–∞—à–∏–Ω—ã —Ä—è–¥–æ–º —Å –ø–∞–ª–∞—Ç–∫–∞–º–∏ —Å—Ç–∞–≤–∏—Ç—å –Ω–µ–ª—å–∑—è (–±–µ—Ä–µ–≥–æ–≤–∞—è –∑–æ–Ω–∞)  
        ‚Äî –ê–≤—Ç–æ–º–æ–±–∏–ª—å –±—É–¥–µ—Ç –≤ 30‚Äì50 –º  
        ‚Äî –•–æ—Ç–∏—Ç–µ –±–ª–∏–∂–µ? –°—Ç–∞–≤—å—Ç–µ –ø–∞–ª–∞—Ç–∫—É –±–ª–∏–∂–µ –∫ –ø–∞—Ä–∫–æ–≤–∫–µ
        üî• *–ß—Ç–æ –µ—Å—Ç—å –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:*  
        ‚Äî –ö–æ—Å—Ç—Ä–æ–≤–∏—â–µ  
        ‚Äî –û—Å–≤–µ—â–µ–Ω–∏–µ  
        ‚Äî –¢—É–∞–ª–µ—Ç –¥–∞—á–Ω–æ–≥–æ —Ç–∏–ø–∞  
        ‚Äî –°—Ç–æ–ª—ã (–ø–æ –º–µ—Ä–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏, –ª—É—á—à–µ –ø—Ä–∏–≤–æ–∑–∏—Ç—å —Å–≤–æ–∏)  
        üö´ –£–º—ã–≤–∞–ª—å–Ω–∏–∫–æ–≤ –Ω–µ—Ç (–Ω–µ—Ç –≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è)  
        üßñ‚Äç‚ôÇ *–ï—Å—Ç—å –¥–≤–µ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö!*
        üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*  
        ‚Äî –û—Ç 1000 –¥–æ 1500 ‚ÇΩ –≤ —Å—É—Ç–∫–∏ –∑–∞ –ø–∞–ª–∞—Ç–∫—É –∏–ª–∏ —à–∞—Ç—ë—Ä  
        ‚Äî –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∑–æ–Ω–∞ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏  
        ‚Äî –†–∞–∑–º–µ—Ä –ø–∞–ª–∞—Ç–∫–∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ü–µ–Ω—É  
        ‚Äî –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ *–∫–æ–ª-–≤–æ –Ω–æ—á–µ–π*  
        ‚Äî –®–∞—Ç—ë—Ä = –ø–∞–ª–∞—Ç–∫–∞  
        ‚Äî *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø –æ—Ç 8‚Äì10 –ø–∞–ª–∞—Ç–æ–∫. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç –º–µ—Å—Ç–æ –Ω–∞ –º–µ—Å—Ç–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
        üèñ –ì–æ—Å—Ç–∏ –∫–µ–º–ø–∏–Ω–≥–∞ –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º *–æ—Å–Ω–æ–≤–Ω—ã–º –ø–µ—Å—á–∞–Ω—ã–º –ø–ª—è–∂–µ–º* ‚Äî –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –Ω–∞ –≤—Å—ë–º –æ–∑–µ—Ä–µ!
        *–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —É –≤–æ–¥—ã! üåä*
        
        üìç *–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è:*
        –û—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ –Ω–∞—à—É –±–∞–∑—É, –ø—Ä–æ–µ—Ö–∞—Ç—å –µ—â–µ 100 –º–µ—Ç—Ä–æ–≤ –∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ, –ø–µ—Ä–µ–¥ –≤—ã–≤–µ—Å–∫–æ–π —Å–∏–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ñ–æ—Ç–æ)
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã 55.186718, 60.055969
        [https://yandex.ru/maps/?ll=60.057310%2C55.186488&mode=routes&rtext=~55.186718%2C60.055969&rtt=auto&ruri=~&source=serp_navig&z=19]`;

        try {
            logger.info(`Sending camping info to chat ${chatId}`);
            await bot.sendMediaGroup(
                chatId,
                photos.map((photo) => ({
                    type: "photo",
                    media: photo,
                })),
            );

            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        } catch (error) {
            logger.error(`Error sending camping info to chat ${chatId}`, { error });
            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        }
    }

    async function handleOur_beach(bot, chatId) {
        const photos = ["content/beach/1.jfif", "content/beach/2.jfif"];

        const message = `üèñüåû *–î–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –∏ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–ª—è–∂–∞*
    üöó *–ü–∞—Ä–∫–æ–≤–∫–∞ –¥–ª—è –≥–æ—Å—Ç–µ–π* ‚Äî 1000 ‚ÇΩ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    üìç –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª—è–∂–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ–∏ –ø–æ–∫—Ä—ã–≤–∞–ª–∞ –∏ –ø–æ–ª–æ—Ç–µ–Ω—Ü–∞.
    ü™ë *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —Å—Ç—É–ª—å–µ–≤, –∫—Ä–µ—Å–µ–ª, —à–µ–∑–ª–æ–Ω–≥–æ–≤* ‚Äî 200 ‚ÇΩ —Å –µ–¥–∏–Ω–∏—Ü—ã.
    üõã *–ê—Ä–µ–Ω–¥–∞ –Ω–∞—à–∏—Ö —à–µ–∑–ª–æ–Ω–≥–æ–≤* ‚Äî 500 ‚ÇΩ –≤ –¥–µ–Ω—å.
    ‚úÖ –ï—Å–ª–∏ –≤—ã –ø—Ä–∏–ø–∞—Ä–∫–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç–Ω–æ–π –ø–∞—Ä–∫–æ–≤–∫–µ, –ø–ª–∞—Ç–∞ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≤–æ–∏—Ö –∫—Ä–µ—Å–µ–ª –Ω–µ –≤–∑–∏–º–∞–µ—Ç—Å—è.
    üêï *–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å —Å–æ–±–∞–∫–∞–º–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞* ‚Äî 1000 ‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤–æ–¥–æ–∫ –∏ –Ω–∞–º–æ—Ä–¥–Ω–∏–∫ (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–æ–±–∞–∫), –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ–±–∞–∫–∞ –æ—á–µ–Ω—å –¥–æ–±—Ä–∞—è –∏ –º–∏–ª–∞—è!
    ‚ÄºÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–∏—Ö –º–∞–Ω–≥–∞–ª–æ–≤, —Å—Ç–æ–ª–æ–≤ –∏ –¥—Ä—É–≥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–ª—è–∂–∞ –ó–ê–ü–†–ï–©–ï–ù–ê!*  
    üî• *–•–æ—Ç–∏—Ç–µ –ø–æ–∂–∞—Ä–∏—Ç—å —à–∞—à–ª—ã–∫–∏? –ê—Ä–µ–Ω–¥—É–π—Ç–µ –º–∞–Ω–≥–∞–ª—å–Ω—É—é –∑–æ–Ω—É!*`;

        try {
            logger.info(`Sending beach info to chat ${chatId}`);
            await bot.sendMediaGroup(
                chatId,
                photos.map((photo) => ({
                    type: "photo",
                    media: photo,
                })),
            );

            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        } catch (error) {
            logger.error(`Error sending beach info to chat ${chatId}`, { error });
            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        }
    }

    async function handleEntertainment(bot, chatId) {
        const photos = [
            "content/Entertaiment/1.webp",
            "content/Entertaiment/2.webp",
            "content/Entertaiment/3.webp",
            "content/Entertaiment/4.webp",
            "content/Entertaiment/5.webp",
            "content/Entertaiment/6.webp",
        ];

        const message = `üèñ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:
    1. –ö—É–ø–∞–Ω–∏–µ –≤ –æ–∑–µ—Ä–µ
    2. –†—É—Å—Å–∫–∞—è –±–∞–Ω—è —Å –ø–∞—Ä–µ–Ω–∏–µ–º ‚ùÑÔ∏è:
        - –ë–∞–Ω—è —Ä—É—Å—Å–∫–∞—è –Ω–∞ –¥—Ä–æ–≤–∞—Ö. –ë–æ–ª—å—à–∞—è, –æ—Ç 8 –¥–æ 30 —á–µ–ª–æ–≤–µ–∫. –í–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è. –ú–∞–Ω–≥–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –∏ –º–∞–Ω–≥–∞–ª –ø–µ—Ä–µ–¥ –±–∞–Ω–µ–π. –ë–æ–ª—å—à–∞—è –ø–∞—Ä–∏–ª–∫–∞, –º–æ–µ—á–Ω–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ, –±–æ–ª—å—à–æ–π –ø—Ä–µ–¥–±–∞–Ω–Ω–∏–∫ —Å –±–æ–ª—å—à–∏–º —Å—Ç–æ–ª–æ–º –∏ —Å–∫–∞–º–µ–π–∫–∞–º–∏ - –°—Ç–æ–∏–º–æ—Å—Ç—å 2500 —á–∞—Å, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç —Ç—Ä–µ—Ö —á–∞—Å–æ–≤.
        - –ë–∞–Ω—è —Ä—É—Å—Å–∫–∞—è –Ω–∞ –¥—Ä–æ–≤–∞—Ö. –ú–∞–ª–∞—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 6 —á–µ–ª–æ–≤–µ–∫. –°—Ç–æ–∏–º–æ—Å—Ç—å 2000 —á–∞—Å –æ—Ç 1.5 —á–∞—Å–æ–≤. 
      üìç–ü–æ—Å–µ—â–µ–Ω–∏–µ –ø–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –±—Ä–æ–Ω–∏, –∑–∞ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞ –±–æ–ª—å—à—É—é –∏ –∑–∞ –¥–≤–∞ –º–∞–ª—É—é. 
      üìç–ë–∞–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ 25 –º–µ—Ç—Ä–∞—Ö –æ—Ç –æ–∑–µ—Ä–∞. 
    3. –ü—Ä–æ–∫–∞—Ç:
        - –°–∞–ø–±–æ—Ä–¥ ‚Äî 1200‚ÇΩ/—á–∞—Å, 3000‚ÇΩ –Ω–∞ 3 —á–∞—Å–∞
        - –ë–∞–π–¥–∞—Ä–∫–∞ (3 —á–µ–ª.) - 1500‚ÇΩ/—á–∞—Å, 3500‚ÇΩ –Ω–∞ 3 —á–∞—Å–∞
        - –õ–æ–¥–∫–∞ –¥–≤—É—Ö–º–µ—Å—Ç–Ω–∞—è –Ω–∞–¥—É–≤–Ω–∞—è - 1500‚ÇΩ/—á–∞—Å, 3500‚ÇΩ –Ω–∞ 3 —á–∞—Å–∞
        - –õ–æ–¥–∫–∞ –Ω–∞–¥—É–≤–Ω–∞—è —á–µ—Ç—ã—Ä–µ—Ö–º–µ—Å—Ç–Ω–∞—è - 1500‚ÇΩ/—á–∞—Å, 3500‚ÇΩ –Ω–∞ 3 —á–∞—Å–∞
      üìç –°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∂–∏–ª–µ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å!
      üìç –ü–ª–∞–≤—Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–¥–∞—é—Ç—Å—è –ø–æ–¥ –æ–±–µ—Å–ø–µ—á–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ª–æ–≥!
    4. –í–æ–ª–µ–π–±–æ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞ 
    5. –ô–æ–≥–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ, —Å –ø–æ—é—â–∏–º–∏ —á–∞—à–∞–º–∏ –¥–ª—è –≥–æ—Å—Ç–µ–π –∫–∞–∂–¥—É—é —Å—Ä–µ–¥—É, —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 9.00 –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —Ö–æ—Ä–æ—à–µ–π –ø–æ–≥–æ–¥—ã.
    6. üçñ *–ê—Ä–µ–Ω–¥–∞ –º–∞–Ω–≥–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã*
        –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–≥–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã –ø—Ä—è–º–æ –Ω–∞ –±–µ—Ä–µ–≥—É ‚Äî –±–æ–ª—å—à–∏–µ —Å—Ç–æ–ª—ã —Å–æ —Å–∫–∞–º–µ–π–∫–∞–º–∏ –∏ –º–∞–Ω–≥–∞–ª–æ–º. –ó–æ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ (–Ω–µ –∫—Ä—ã—Ç—ã–µ), –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞ —É –≤–æ–¥—ã.
        üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:*  
        ‚Äî *–í—ã—Ö–æ–¥–Ω—ã–µ:* 2500 ‚ÇΩ –∑–∞ 3 —á–∞—Å–∞  
        ‚Äî *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:* 500 ‚ÇΩ –∑–∞ –∫–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å  
        ‚Äî *–ë—É–¥–Ω–∏–µ –¥–Ω–∏:* 2500 ‚ÇΩ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å
        üöó *–ü–∞—Ä–∫–æ–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ* ‚Äî 500 ‚ÇΩ –≤ —Å—É—Ç–∫–∏.
        –ü—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –º–∞–Ω–≥–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞.
        –ú–∞–Ω–≥–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å—ë–π —É —Å–∞–º–æ–≥–æ –±–µ—Ä–µ–≥–∞ –æ–∑–µ—Ä–∞! üåÖ
        –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`;

        try {
            logger.info(`Sending entertainment info to chat ${chatId}`);
            await bot.sendMediaGroup(
                chatId,
                photos.map((photo) => ({
                    type: "photo",
                    media: photo,
                })),
            );

            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        } catch (error) {
            logger.error(`Error sending entertainment info to chat ${chatId}`, { error });
            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        }
    }

    async function handleFacilities(bot, chatId) {
        logger.info(`Sending facilities info to chat ${chatId}`);
        await utils.safeSendMessage(
            bot,
            chatId,
            `üçΩÔ∏è –£–¥–æ–±—Å—Ç–≤–∞:
‚Ä¢ –û–±—â–∞—è –∫—É—Ö–Ω—è —Å –≥–∞–∑–æ–≤—ã–º–∏ –ø–ª–∏—Ç–∞–º–∏
‚Ä¢ –ü–∞—Ä–∫–æ–≤–∫–∞:
  - –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ ‚Äî 500‚ÇΩ/—Å—É—Ç–∫–∏
  - –ì–∞–∑–µ–ª—å ‚Äî 1000‚ÇΩ/—Å—É—Ç–∫–∏
‚Ä¢ –ß–∏—Å—Ç–µ–π—à–∞—è —Ä–æ–¥–Ω–∏–∫–æ–≤–∞—è –≤–æ–¥–∞ –∏–∑ –æ–∑–µ—Ä–∞
‚Ä¢ –ó–∞–ø–∞—Å –ø–∏—Ç—å–µ–≤–æ–π –≤–æ–¥—ã, —Ä–µ—à—ë—Ç–∫–∏ –∏ —É–≥–ª–∏ ‚Äî –±–µ—Ä–∏—Ç–µ —Å —Å–æ–±–æ–π

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`,
            {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            },
        );
    }

    async function handleMangalchik(bot, chatId) {
        const photos = [
            "content/mangalchik/1.jfif",
            "content/mangalchik/2.jfif",
        ];

        const message = `üçñ *–ê—Ä–µ–Ω–¥–∞ –º–∞–Ω–≥–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã*  
–£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–≥–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã –ø—Ä—è–º–æ –Ω–∞ –±–µ—Ä–µ–≥—É ‚Äî –±–æ–ª—å—à–∏–µ —Å—Ç–æ–ª—ã —Å–æ —Å–∫–∞–º–µ–π–∫–∞–º–∏ –∏ –º–∞–Ω–≥–∞–ª–æ–º. –ó–æ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ (–Ω–µ –∫—Ä—ã—Ç—ã–µ), –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞ —É –≤–æ–¥—ã.  
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã:*  
‚Äî *–í—ã—Ö–æ–¥–Ω—ã–µ:* 2500 ‚ÇΩ –∑–∞ 3 —á–∞—Å–∞  
‚Äî *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ:* 500 ‚ÇΩ –∑–∞ –∫–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —á–∞—Å  
‚Äî *–ë—É–¥–Ω–∏–µ –¥–Ω–∏:* 2500 ‚ÇΩ –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å  
üöó *–ü–∞—Ä–∫–æ–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ* ‚Äî 500 ‚ÇΩ –≤ —Å—É—Ç–∫–∏.  
–ú–∞–Ω–≥–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Å–µ–º—å—ë–π —É —Å–∞–º–æ–≥–æ –±–µ—Ä–µ–≥–∞ –æ–∑–µ—Ä–∞! üåÖ  
‚ÄºÔ∏è *–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤–æ–∏—Ö –º–∞–Ω–≥–∞–ª–æ–≤, —Å—Ç–æ–ª–æ–≤ –∏ –¥—Ä—É–≥–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–ª—è–∂–∞ –ó–ê–ü–†–ï–©–ï–ù–ê!*  
üî• *–•–æ—Ç–∏—Ç–µ –ø–æ–∂–∞—Ä–∏—Ç—å —à–∞—à–ª—ã–∫–∏? –ê—Ä–µ–Ω–¥—É–π—Ç–µ –º–∞–Ω–≥–∞–ª—å–Ω—É—é –∑–æ–Ω—É!*

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`;

        try {
            logger.info(`Sending mangalchik info to chat ${chatId}`);
            await bot.sendMediaGroup(
                chatId,
                photos.map((photo) => ({
                    type: "photo",
                    media: photo,
                })),
            );

            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        } catch (error) {
            logger.error(`Error sending mangalchik info to chat ${chatId}`, { error });
            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        }
    }

    async function handleDirections(bot, chatId) {
        const photos = [
            "content/road/–ú–∞—Ä—à—Ä—É—Ç.png",
            "content/road/50c10319-d3d4-4488-bccf-58b2f16b00df.jfif",
            "content/road/d6f84703-8cba-4217-a3ca-b42d2da16d27.jfif",
        ];

        const message = `
        üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 
            55.1881079369311, 60.05969764417703
            [https://yandex.ru/maps/?ll=60.061851%2C55.187183&mode=routes&rtext=~55.187969%2C60.059069&rtt=auto&ruri=~ymapsbm1%3A%2F%2Forg%3Foid%3D109014041624&source=serp_navig&z=15.3]

        üöô –í–æ–∑–º–æ–∂–µ–Ω –∑–∞–µ–∑–¥ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ, –ø–∞—Ä–∫–æ–≤–∫–∞ –ø–ª–∞—Ç–Ω–∞—è.

        *–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:*`;

        try {
            logger.info(`Sending directions info to chat ${chatId}`);
            await bot.sendMediaGroup(
                chatId,
                photos.map((photo) => ({
                    type: "photo",
                    media: photo,
                })),
            );

            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        } catch (error) {
            logger.error(`Error sending directions info to chat ${chatId}`, { error });
            await utils.safeSendMessage(bot, chatId, message, {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            });
        }
    }

    async function handleBookingNo(bot, chatId) {
        logger.info(`Handling booking_no for chat ${chatId}`);
        await utils.safeSendMessage(
            bot,
            chatId,
            `üìå –ù–∞—à–∞ –±–∞–∑–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –Ω–∞ –±–µ—Ä–µ–≥—É –æ–∑–µ—Ä–∞ –≤ –∑–∞–ø–æ–≤–µ–¥–Ω–æ–π –∑–æ–Ω–µ.

üíß –í —Ü–µ–ª—è—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏–∏:
‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
‚Ä¢ –î—É—à–∞ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –±–∞–Ω–∏ –Ω–∞ –¥—Ä–æ–≤–∞—Ö (–∫–∞–∫ –¥–ª—è –ø–æ–º—ã–≤–∫–∏, —Ç–∞–∫ –∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞)
‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —É–ª–∏—Ü–µ

üßª –ë–æ–ª—å—à–æ–π –¥–∞—á–Ω—ã–π —Ç—É–∞–ª–µ—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
üë∂ –î–µ—Ç–∏ –¥–æ 5 –ª–µ—Ç ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–µ—Å–ª–∏ –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞)

–ï—Å–ª–∏ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:
[–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä](https://script.google.com/macros/s/AKfycbywmbK6PsGIqGEJQGEK2ix-IQXPG0TNSBXNr-19QODCRxDXWv-ntNllrh5O6X-amWwV/exec)

–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!

–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`,
            {
                parse_mode: "Markdown",
                ...mainMenuKeyboards.getBackToMenuKeyboard(),
            },
        );
    }

    async function handleRoomDetails(bot, chatId, data) {
        const roomIndex = parseInt(data.split("_")[1]);
        const roomsData = services.roomsData.getRoomsData();
        const room = roomsData[roomIndex];
        if (room) {
            logger.info(`Showing room details for chat ${chatId}, room ID: ${room.ID}`);
            let roomInfo = `üè† ${mainMenuKeyboards.escapeHtml(room.–ù–∞–∑–≤–∞–Ω–∏–µ || "–ù–æ–º–µ—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}\n\n`;
            if (room.–û–ø–∏—Å–∞–Ω–∏–µ) roomInfo += `üìù ${mainMenuKeyboards.escapeHtml(room.–û–ø–∏—Å–∞–Ω–∏–µ)}\n\n`;
            if (room.–¢–∏–ø) roomInfo += `üè∑Ô∏è –û–±—ä–µ–∫—Ç –∞—Ä–µ–Ω–¥—ã: ${mainMenuKeyboards.escapeHtml(room.–¢–∏–ø)}\n`;
            if (room.–ö–æ–º–Ω–∞—Ç) roomInfo += `üè† –ö–æ–º–Ω–∞—Ç: ${room.–ö–æ–º–Ω–∞—Ç}\n`;
            if (room.–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                roomInfo += `üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${room.–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å} —á–µ–ª. –≤ –∫–æ–º–Ω–∞—Ç–µ\n`;
            if (room.–¶–µ–Ω–∞) roomInfo += `üí∞ –¶–µ–Ω–∞: –æ—Ç ${room.–¶–µ–Ω–∞}‚ÇΩ\n`;
            if (room.–£–¥–æ–±—Å—Ç–≤–∞) roomInfo += `üõèÔ∏è –£–¥–æ–±—Å—Ç–≤–∞: ${mainMenuKeyboards.escapeHtml(room.–£–¥–æ–±—Å—Ç–≤–∞)}\n`;
            if (room.–í—Ö–æ–¥–∏—Ç)
                roomInfo += `‚ÑπÔ∏è –í —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç: ${mainMenuKeyboards.escapeHtml(room.–í—Ö–æ–¥–∏—Ç)}\n`;

            roomInfo += `\n‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ:`;

            let photos = services.roomsData.getRoomPhotos(room.ID);
            if (photos.length === 0) {
                logger.warn(`No photos found for room ${room.ID} in chat ${chatId}`);
            }

            if (photos && photos.length > 0) {
                logger.info(`Sending ${photos.length} photos for room ${room.ID} to chat ${chatId}`);
                try {
                    if (photos.length === 1) {
                        await bot.sendPhoto(chatId, photos[0], {
                            caption: roomInfo,
                            parse_mode: "Markdown",
                            reply_markup: mainMenuKeyboards.getRoomDetailsKeyboard().reply_markup,
                        });
                    } else {
                        const mediaGroup = photos.map((photo, index) => ({
                            type: "photo",
                            media: photo,
                            caption: index === 0 ? roomInfo : undefined,
                            parse_mode: index === 0 ? "Markdown" : undefined,
                        }));

                        await bot.sendMediaGroup(chatId, mediaGroup);

                        await utils.safeSendMessage(
                            bot,
                            chatId,
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            {
                                ...mainMenuKeyboards.getRoomDetailsKeyboard(),
                            },
                        );
                    }
                } catch (error) {
                    logger.error(`Error sending media group for room ${room.ID} in chat ${chatId}`, { error });
                    for (let i = 0; i < photos.length; i++) {
                        const photoUrl = photos[i];
                        try {
                            logger.info(`Sending photo ${i + 1}/${photos.length} for room ${room.ID} to chat ${chatId}: ${photoUrl}`);
                            if (i === 0) {
                                await bot.sendPhoto(chatId, photoUrl, {
                                    caption: roomInfo,
                                    parse_mode: "Markdown",
                                });
                            } else {
                                await bot.sendPhoto(chatId, photoUrl);
                            }
                            if (i < photos.length - 1) {
                                await new Promise((resolve) => setTimeout(resolve, 500));
                            }
                        } catch (photoError) {
                            logger.error(`Error sending photo ${photoUrl} for room ${room.ID} in chat ${chatId}`, { photoError });
                            await utils.safeSendMessage(
                                bot,
                                chatId,
                                `üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`,
                                {
                                    parse_mode: "Markdown",
                                }
                            );
                        }
                    }
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        {
                            ...mainMenuKeyboards.getRoomDetailsKeyboard(),
                        },
                    );
                }
            } else {
                await utils.safeSendMessage(bot, chatId, roomInfo, {
                    parse_mode: "Markdown",
                    ...mainMenuKeyboards.getRoomDetailsKeyboard(),
                });
            }
        } else {
            logger.warn(`Room with index ${roomIndex} not found for chat ${chatId}`);
            await utils.safeSendMessage(
                bot,
                chatId,
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                {
                    parse_mode: "Markdown",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: "üîô –ö —Å–ø–∏—Å–∫—É –Ω–æ–º–µ—Ä–æ–≤",
                                    callback_data: "rooms",
                                },
                            ],
                        ],
                    },
                },
            );
        }
    }
};