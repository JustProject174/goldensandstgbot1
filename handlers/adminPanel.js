const logger = require("../logger");
const keyboards = require("../keyboards/adminPanel");
const mainKeyboards = require("../keyboards/mainMenu");
const utils = require("../utils");
const states = require("../states");
const services = {
    knowledgeBase: require("../services/knowledgeBase"),
    roomsData: require("../services/roomsData"),
    adminAnswers: require("../services/adminAnswers"),
};

const targetChatId = "-1002826990012"; // –ß–∞—Ç –∞–¥–º–∏–Ω–æ–≤
const threadId = 102; // ID —Ç–µ–º—ã –≤ —Ñ–æ—Ä—É–º–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
function escapeMarkdown(text) {
    return String(text).replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, "\\$1");
}

module.exports = function setupAdminHandlers(bot, userStates) {
    // –ö–æ–º–∞–Ω–¥–∞ /answer
    bot.onText(/\/answer (\d+) (.+)/, async (msg, match) => {
        const userId = msg.from.id;
        if (!(await utils.isAdmin(bot, userId))) return;

        const targetUserId = parseInt(match[1]);
        let answer = escapeMarkdown(match[2]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const pendingQuestions = services.adminAnswers.getPendingQuestions();
        if (!pendingQuestions.has(targetUserId.toString())) {
            return utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${targetUserId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.`,
                { parse_mode: "Markdown", message_thread_id: threadId }
            );
        }

        try {
            await utils.safeSendMessage(
                bot,
                targetUserId,
                `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n${answer}`,
                { parse_mode: "Markdown", ...mainKeyboards.getBackToMenuKeyboard() }
            );

            // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –µ–¥–∏–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            await services.adminAnswers.removeQuestion(targetUserId);

            userStates.set(userId, states.ADMIN_ANSWERING);
            userStates.set(`${userId}_answer_data`, { targetUserId, answer });

            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\nüî§ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ Supabase:\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ–∑–µ—Ä–≤, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å_\n\nüí° –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–∞–≤—Ç–æ" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é AI`,
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        } catch (error) {
            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${escapeMarkdown(error.message)}`,
                { parse_mode: "Markdown", message_thread_id: threadId }
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    bot.on("callback_query", async (callbackQuery) => {
        const data = callbackQuery.data;
        const userId = callbackQuery.from.id;
        if (!(await utils.isAdmin(bot, userId))) return;

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –æ–¥–∏–Ω —Ä–∞–∑
        await bot.answerCallbackQuery(callbackQuery.id).catch(console.error);

        try {
            switch (data) {
                case "admin_panel":
                    userStates.set(userId, states.ADMIN_PANEL);
                    return utils.safeSendMessage(
                        bot,
                        targetChatId,
                        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getAdminKeyboard() }
                    );

                case "admin_stats":
                    return handleAdminStats();

                case "admin_kb":
                    return handleAdminKnowledgeBase();

                case "admin_pending":
                    return handleAdminPending();

                case "admin_reload":
                    return handleAdminReload();
            }

            if (data.startsWith("view_question_")) {
                return handleViewQuestion(data.replace("view_question_", ""));
            }

            if (data.startsWith("answer_btn_")) {
                const targetUserId = data.replace("answer_btn_", "");
                const pending = services.adminAnswers.getPendingQuestions().get(targetUserId);

                if (!pending) {
                    return utils.safeSendMessage(
                        bot,
                        targetChatId,
                        "‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
                    );
                }

                userStates.set(userId, states.ADMIN_ANSWERING_BUTTON);
                userStates.set(`${userId}_target_user`, targetUserId);

                return utils.safeSendMessage(
                    bot,
                    targetChatId,
                    `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"${escapeMarkdown(pending.question)}"`,
                    { parse_mode: "Markdown", message_thread_id: threadId }
                );
            }

            if (data.startsWith("reject_btn_")) {
                return handleRejectQuestion(data.replace("reject_btn_", ""));
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ admin callback:", error.message);
            return utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${escapeMarkdown(error.message)}`,
                { parse_mode: "Markdown", message_thread_id: threadId }
            );
        }
    });

    // –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    async function handleAdminStats() {
        const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: ${userStates.size}
‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${services.adminAnswers.getPendingQuestions().size}
üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}
üè† –ù–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${services.roomsData.getRoomsData().length}`;

        return utils.safeSendMessage(bot, targetChatId, escapeMarkdown(stats), {
            parse_mode: "Markdown",
            message_thread_id: threadId,
            ...keyboards.getBackToAdminKeyboard(),
        });
    }

    async function handleAdminKnowledgeBase() {
        const knowledgeBase = services.knowledgeBase.getKnowledgeBase().length;

        if (knowledgeBase.length === 0) {
            return utils.safeSendMessage(bot, targetChatId, "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞", {
                parse_mode: "Markdown",
                message_thread_id: threadId,
                ...keyboards.getBackToAdminKeyboard(),
            });
        }

        let kbInfo = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n";
        const messages = [];

        knowledgeBase.forEach((item, index) => {
            kbInfo += `${index + 1}. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${escapeMarkdown(item.keywords.join(", "))}\n`;
            kbInfo += `   –û—Ç–≤–µ—Ç: ${escapeMarkdown(item.answer.substring(0, 100))}${item.answer.length > 100 ? "..." : ""}\n\n`;

            // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –±–ª–∏–∑–∫–∞ –∫ –ª–∏–º–∏—Ç—É Telegram (4096), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (kbInfo.length > 3500) {
                messages.push(kbInfo);
                kbInfo = "";
            }
        });

        if (kbInfo.trim()) messages.push(kbInfo);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Å–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (const msgText of messages) {
            await utils.safeSendMessage(bot, targetChatId, msgText, {
                parse_mode: "Markdown",
                message_thread_id: threadId,
            });
        }

        // –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        await utils.safeSendMessage(bot, targetChatId, "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", {
            parse_mode: "Markdown",
            message_thread_id: threadId,
            ...keyboards.getBackToAdminKeyboard(),
        });
    }

    async function handleAdminPending() {
        const pendingQuestions = services.adminAnswers.getPendingQuestions();

        if (pendingQuestions.size === 0) {
            return utils.safeSendMessage(
                bot,
                targetChatId,
                "‚ùì –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        }

        return utils.safeSendMessage(
            bot,
            targetChatId,
            "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
            { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getPendingQuestionsListKeyboard(pendingQuestions) }
        );
    }

    async function handleViewQuestion(userId) {
        const questionData = services.adminAnswers.getPendingQuestions().get(userId);

        if (!questionData) {
            return utils.safeSendMessage(
                bot,
                targetChatId,
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        }

        const timestamp = new Date(questionData.timestamp).toLocaleString("ru-RU");
        const questionInfo = `üìã –ù–û–í–´–ô –í–û–ü–†–û–°\n
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID ${userId}
üìÖ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: ${timestamp}\n
‚ùì –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:
${escapeMarkdown(questionData.question)}\n
üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        return utils.safeSendMessage(bot, targetChatId, questionInfo, {
            parse_mode: "Markdown",
            message_thread_id: threadId,
            ...keyboards.getQuestionManagementKeyboard(userId),
        });
    }

    async function handleRejectQuestion(targetUserId) {
        try {
            const rejectionMessage = "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–æ–≤–∞";

            await utils.safeSendMessage(bot, parseInt(targetUserId), rejectionMessage, {
                parse_mode: "Markdown",
                ...mainKeyboards.getBackToMenuKeyboard(),
            });

            await services.adminAnswers.removeQuestion(targetUserId);

            return utils.safeSendMessage(
                bot,
                targetChatId,
                "‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
            return utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ${escapeMarkdown(error.message)}`,
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        }
    }

    async function handleAdminReload() {
        try {
            await services.knowledgeBase.loadKnowledgeBase();
            await services.adminAnswers.loadAndProcessAdminAnswers();
            await services.roomsData.loadRoomsData();

            return utils.safeSendMessage(
                bot,
                targetChatId,
                `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\nüìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}\nüè† –ù–æ–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${services.roomsData.getRoomsData().length}`,
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã:", error);
            return utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${escapeMarkdown(error.message)}`,
                { parse_mode: "Markdown", message_thread_id: threadId, ...keyboards.getBackToAdminKeyboard() }
            );
        }
    }
};
