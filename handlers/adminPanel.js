const keyboards = require("../keyboards/adminPanel");
const mainKeyboards = require("../keyboards/mainMenu");
const utils = require("../utils");
const states = require("../states");
const services = {
    knowledgeBase: require("../services/knowledgeBase"),
    roomsData: require("../services/roomsData"),
    adminAnswers: require("../services/adminAnswers"),
};

const targetChatId = "-1002826990012"; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤

module.exports = function setupAdminHandlers(bot, userStates) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /answer
    bot.onText(/\/answer (\d+) (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!(await utils.isAdmin(bot, userId))) return;

        const targetUserId = parseInt(match[1]);
        let answer = match[2];

        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        answer = answer.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, "");

        try {
            await utils.safeSendMessage(
                bot,
                targetUserId, // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n${answer}`,
                {
                    parse_mode: "Markdown",
                    ...mainKeyboards.getBackToMenuKeyboard(),
                },
            );

            // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            services.adminAnswers.getPendingQuestions().delete(targetUserId.toString());

            userStates.set(userId, states.ADMIN_ANSWERING);
            userStates.set(`${userId}_answer_data`, { targetUserId, answer });

            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\nüî§ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ Supabase:\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ–∑–µ—Ä–≤, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å_\n\nüí° –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–∞–≤—Ç–æ" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é AI`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        } catch (error) {
            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                },
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    bot.on("callback_query", async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        if (!(await utils.isAdmin(bot, userId))) return;

        try {
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
            } catch (error) {
                console.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:",
                    error.message,
                );
            }

            switch (data) {
                case "admin_panel":
                    userStates.set(userId, states.ADMIN_PANEL);
                    await utils.safeSendMessage(
                        bot,
                        targetChatId,
                        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                        {
                            parse_mode: "Markdown",
                            message_thread_id: 102,
                            ...keyboards.getAdminKeyboard(),
                        },
                    );
                    break;

                case "admin_stats":
                    await handleAdminStats(bot, chatId);
                    break;

                case "admin_kb":
                    await handleAdminKnowledgeBase(bot, chatId);
                    break;

                case "admin_pending":
                    await handleAdminPending(bot, chatId);
                    break;

                case "admin_reload":
                    await handleAdminReload(bot, chatId);
                    break;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if (data.startsWith("view_question_")) {
                const targetUserId = data.replace("view_question_", "");
                await handleViewQuestion(bot, chatId, targetUserId);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            if (data.startsWith("answer_btn_")) {
                const targetUserId = data.replace("answer_btn_", "");
                userStates.set(userId, states.ADMIN_ANSWERING_BUTTON);
                userStates.set(`${userId}_target_user`, targetUserId);

                const questionData = services.adminAnswers
                    .getPendingQuestions()
                    .get(targetUserId);
                const questionText = questionData
                    ? questionData.question
                    : "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";

                await utils.safeSendMessage(
                    bot,
                    targetChatId,
                    `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"${questionText}"`,
                    {
                        parse_mode: "Markdown",
                        message_thread_id: 102,
                    },
                );
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            if (data.startsWith("reject_btn_")) {
                const targetUserId = data.replace("reject_btn_", "");
                await handleRejectQuestion(bot, chatId, targetUserId);
            }
        } catch (error) {
            console.error(
                "–û—à–∏–±–∫–∞ –≤ admin callback query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:",
                error.message,
            );
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
            } catch (answerError) {
                console.error(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ admin callback query:",
                    answerError.message,
                );
            }
        }
    });

    async function handleAdminStats(bot, chatId) {
        const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

    üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: ${userStates.size}
    ‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${services.adminAnswers.getPendingQuestions().size}
    üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${await services.knowledgeBase.getKnowledgeBaseLength()}
    üè† –ù–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${services.roomsData.getRoomsData().length}`;

        await utils.safeSendMessage(bot, targetChatId, stats, {
            parse_mode: "Markdown",
            message_thread_id: 102,
            ...keyboards.getBackToAdminKeyboard(),
        });
    }

    async function handleAdminKnowledgeBase(bot, chatId) {
        let kbInfo = "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n";
        const knowledgeBase = await services.knowledgeBase.getKnowledgeBase();

        if (knowledgeBase.length === 0) {
            kbInfo += "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞";
        } else {
            knowledgeBase.forEach((item, index) => {
                kbInfo += `${index + 1}. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${item.keywords.join(", ")}\n`;
                kbInfo += `   –û—Ç–≤–µ—Ç: ${item.answer.substring(0, 100)}${item.answer.length > 100 ? "..." : ""}\n\n`;
            });
        }

        await utils.safeSendMessage(bot, targetChatId, kbInfo, {
            parse_mode: "Markdown",
            message_thread_id: 102,
            ...keyboards.getBackToAdminKeyboard(),
        });
    }

    async function handleAdminPending(bot, chatId) {
        const pendingQuestions = services.adminAnswers.getPendingQuestions();

        if (pendingQuestions.size === 0) {
            await utils.safeSendMessage(
                bot,
                targetChatId,
                "‚ùì –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        } else {
            await utils.safeSendMessage(
                bot,
                targetChatId,
                "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:",
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getPendingQuestionsListKeyboard(
                        pendingQuestions,
                    ),
                },
            );
        }
    }

    async function handleViewQuestion(bot, chatId, userId) {
        const pendingQuestions = services.adminAnswers.getPendingQuestions();
        const questionData = pendingQuestions.get(userId);

        if (!questionData) {
            await utils.safeSendMessage(
                bot,
                targetChatId,
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
            return;
        }

        const timestamp = new Date(questionData.timestamp).toLocaleString(
            "ru-RU",
        );
        const questionInfo = `üìã **–ù–û–í–´–ô –í–û–ü–†–û–°**

    üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ID ${userId}
    üìÖ **–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è:** ${timestamp}

    ‚ùì **–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:**
    ${questionData.question}

    üîΩ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        await utils.safeSendMessage(bot, targetChatId, questionInfo, {
            parse_mode: "Markdown",
            message_thread_id: 102,
            ...keyboards.getQuestionManagementKeyboard(userId),
        });
    }

    async function handleRejectQuestion(bot, chatId, targetUserId) {
        try {
            const rejectionMessage =
                "–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–æ–≤–∞";

            const userChatId =
                typeof targetUserId === "string"
                    ? parseInt(targetUserId)
                    : targetUserId;

            await utils.safeSendMessage(bot, userChatId, rejectionMessage, {
                parse_mode: "Markdown",
                ...mainKeyboards.getBackToMenuKeyboard(),
            });

            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ Supabase
            await services.adminAnswers.removeQuestion(targetUserId);

            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:", error);
            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ${error.message}`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        }
    }

    async function handleAdminReload(bot, chatId) {
        try {
            await services.knowledgeBase.loadKnowledgeBase();
            await services.adminAnswers.loadAndProcessAdminAnswers();
            await services.roomsData.loadRoomsData();

            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\nüìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${await services.knowledgeBase.getKnowledgeBaseLength()}\nüè† –ù–æ–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${services.roomsData.getRoomsData().length}`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
            await utils.safeSendMessage(
                bot,
                targetChatId,
                `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`,
                {
                    parse_mode: "Markdown",
                    message_thread_id: 102,
                    ...keyboards.getBackToAdminKeyboard(),
                },
            );
        }
    }
};