const keyboards = require('../keyboards/adminPanel');
const mainKeyboards = require('../keyboards/mainMenu');
const utils = require('../utils');
const states = require('../states');
const services = {
    knowledgeBase: require('../services/knowledgeBase'),
    roomsData: require('../services/roomsData'),
    adminAnswers: require('../services/adminAnswers')
};

module.exports = function setupAdminHandlers(bot, userStates) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /answer
    bot.onText(/\/answer (\d+) (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        if (!utils.isAdmin(userId)) return;
        
        const targetUserId = parseInt(match[1]);
        let answer = match[2];
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
        answer = answer.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
        
        try {
            await utils.safeSendMessage(bot, targetUserId, `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n${answer}`, {
                parse_mode: 'Markdown',
                ...mainKeyboards.getBackToMenuKeyboard() // –ò—Å–ø–æ–ª—å–∑—É–µ–º mainKeyboards
            });
            
            services.adminAnswers.getPendingQuestions().delete(targetUserId);
            
            userStates.set(userId, states.ADMIN_ANSWERING);
            userStates.set(`${userId}_answer_data`, { targetUserId, answer });
            
            await utils.safeSendMessage(bot, chatId, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\\.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ–∑–µ—Ä–≤, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å_`, {
                parse_mode: 'MarkdownV2'
            });
            
        } catch (error) {
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;
        
        if (!utils.isAdmin(userId)) return;
        
        try {
            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error.message);
        }
        
        switch (data) {
            case 'admin_panel':
                userStates.set(userId, states.ADMIN_PANEL);
                await utils.safeSendMessage(bot, chatId, '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', keyboards.getAdminKeyboard());
                break;
                
            case 'admin_stats':
                await handleAdminStats(bot, chatId);
                break;
                
            case 'admin_kb':
                await handleAdminKnowledgeBase(bot, chatId);
                break;
                
            case 'admin_pending':
                await handleAdminPending(bot, chatId);
                break;
                
            case 'admin_reload':
                await handleAdminReload(bot, chatId);
                break;
        }
    });

    async function handleAdminStats(bot, chatId) {
        const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
                
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: ${userStates.size}
‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${services.adminAnswers.getPendingQuestions().size}
üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}
üè† –ù–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${services.roomsData.getRoomsData().length}`;

        await utils.safeSendMessage(bot, chatId, stats, keyboards.getBackToAdminKeyboard());
    }

    async function handleAdminKnowledgeBase(bot, chatId) {
        let kbInfo = 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n';
        const knowledgeBase = services.knowledgeBase.getKnowledgeBase();
        
        if (knowledgeBase.length === 0) {
            kbInfo += '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞';
        } else {
            knowledgeBase.forEach((item, index) => {
                kbInfo += `${index + 1}. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${item.keywords.join(', ')}\n`;
                kbInfo += `   –û—Ç–≤–µ—Ç: ${item.answer.substring(0, 100)}${item.answer.length > 100 ? '...' : ''}\n\n`;
            });
        }
        
        await utils.safeSendMessage(bot, chatId, kbInfo, keyboards.getBackToAdminKeyboard());
    }

    async function handleAdminPending(bot, chatId) {
        let pendingInfo = '‚ùì –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n';
        const pendingQuestions = services.adminAnswers.getPendingQuestions();
        
        if (pendingQuestions.size === 0) {
            pendingInfo += '–ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤';
        } else {
            let count = 1;
            for (const [userId, questionData] of pendingQuestions) {
                const timestamp = new Date(questionData.timestamp).toLocaleString('ru-RU');
                pendingInfo += `${count}. ID: ${userId}\n`;
                pendingInfo += `   –í—Ä–µ–º—è: ${timestamp}\n`;
                pendingInfo += `   –í–æ–ø—Ä–æ—Å: ${questionData.question}\n\n`;
                count++;
            }
        }
        
        await utils.safeSendMessage(bot, chatId, pendingInfo, keyboards.getBackToAdminKeyboard());
    }

    async function handleAdminReload(bot, chatId) {
        try {
            await services.knowledgeBase.loadKnowledgeBase();
            await services.adminAnswers.loadAndProcessAdminAnswers();
            await services.roomsData.loadRoomsData();
            
            await utils.safeSendMessage(bot, chatId, `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞:
                    
üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}
üè† –ù–æ–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${services.roomsData.getRoomsData().length}`, keyboards.getBackToAdminKeyboard());
        } catch (error) {
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, keyboards.getBackToAdminKeyboard());
        }
    }
};