const keyboards = require('../keyboards/adminPanel');
const mainKeyboards = require('../keyboards/mainMenu');
const utils = require('../utils');
const states = require('../states');
const services = {
    knowledgeBase: require('../services/knowledgeBase'),
    roomsData: require('../services/roomsData'),
    adminAnswers: require('../services/adminAnswers')
};

module.exports = function setupAdminHandlers(bot, userStates) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /answer
    bot.onText(/\/answer (\d+) (.+)/, async (msg, match) => {
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!utils.isAdmin(userId)) return;

        const targetUserId = parseInt(match[1]);
        let answer = match[2];

        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        answer = answer.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, '');

        try {
            await utils.safeSendMessage(bot, targetUserId, `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n${answer}`, {
                parse_mode: 'Markdown',
                ...mainKeyboards.getBackToMenuKeyboard() // –ò—Å–ø–æ–ª—å–∑—É–µ–º mainKeyboards
            });

            services.adminAnswers.getPendingQuestions().delete(targetUserId.toString());

            userStates.set(userId, states.ADMIN_ANSWERING);
            userStates.set(`${userId}_answer_data`, { targetUserId, answer });

            await utils.safeSendMessage(bot, chatId, `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ä–µ–∑–µ—Ä–≤, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å_`, {
                parse_mode: 'Markdown'
            });

        } catch (error) {
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        if (!utils.isAdmin(userId)) return;

        try {
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error.message);
            }

            switch (data) {
                case 'admin_panel':
                    userStates.set(userId, states.ADMIN_PANEL);
                    await utils.safeSendMessage(bot, chatId, '‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', keyboards.getAdminKeyboard());
                    break;

                case 'admin_stats':
                    await handleAdminStats(bot, chatId);
                    break;

                case 'admin_kb':
                    await handleAdminKnowledgeBase(bot, chatId);
                    break;

                case 'admin_pending':
                    await handleAdminPending(bot, chatId);
                    break;

                case 'admin_reload':
                    await handleAdminReload(bot, chatId);
                    break;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            if (data.startsWith('view_question_')) {
                const targetUserId = data.replace('view_question_', '');
                await handleViewQuestion(bot, chatId, targetUserId);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            if (data.startsWith('answer_btn_')) {
                const targetUserId = data.replace('answer_btn_', '');
                userStates.set(userId, states.ADMIN_ANSWERING_BUTTON);
                userStates.set(`${userId}_target_user`, targetUserId);

                const questionData = services.adminAnswers.getPendingQuestions().get(targetUserId);
                const questionText = questionData ? questionData.question : '–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';

                await utils.safeSendMessage(bot, chatId, `üìù –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"${questionText}"`);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            if (data.startsWith('reject_btn_')) {
                const targetUserId = data.replace('reject_btn_', '');
                await handleRejectQuestion(bot, chatId, targetUserId);
            }–π–¥–µ–Ω';

                await utils.safeSendMessage(bot, chatId, `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: ${targetUserId}\n\n–í–æ–ø—Ä–æ—Å: "${questionText}"`, {
                    reply_markup: {
                        inline_keyboard: [[
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_pending' }
                        ]]
                    }
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            if (data.startsWith('reject_btn_')) {
                const targetUserId = data.replace('reject_btn_', '');
                await handleRejectQuestion(bot, chatId, targetUserId);
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ admin callback query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", error.message);
            try {
                await bot.answerCallbackQuery(callbackQuery.id);
            } catch (answerError) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ admin callback query:", answerError.message);
            }
        }
    });

    async function handleAdminStats(bot, chatId) {
        const stats = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏: ${userStates.size}
‚ùì –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${services.adminAnswers.getPendingQuestions().size}
üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}
üè† –ù–æ–º–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${services.roomsData.getRoomsData().length}`;

        await utils.safeSendMessage(bot, chatId, stats, keyboards.getBackToAdminKeyboard());
    }

    async function handleAdminKnowledgeBase(bot, chatId) {
        let kbInfo = 'üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n\n';
        const knowledgeBase = services.knowledgeBase.getKnowledgeBase();

        if (knowledgeBase.length === 0) {
            kbInfo += '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞';
        } else {
            knowledgeBase.forEach((item, index) => {
                kbInfo += `${index + 1}. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${item.keywords.join(', ')}\n`;
                kbInfo += `   –û—Ç–≤–µ—Ç: ${item.answer.substring(0, 100)}${item.answer.length > 100 ? '...' : ''}\n\n`;
            });
        }

        await utils.safeSendMessage(bot, chatId, kbInfo, keyboards.getBackToAdminKeyboard());
    }

    async function handleAdminPending(bot, chatId) {
        const pendingQuestions = services.adminAnswers.getPendingQuestions();

        if (pendingQuestions.size === 0) {
            await utils.safeSendMessage(bot, chatId, '‚ùì –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤', keyboards.getBackToAdminKeyboard());
        } else {
            await utils.safeSendMessage(bot, chatId, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', keyboards.getPendingQuestionsListKeyboard(pendingQuestions));
        }
    }

    async function handleViewQuestion(bot, chatId, userId) {
        const pendingQuestions = services.adminAnswers.getPendingQuestions();
        const questionData = pendingQuestions.get(userId);

        if (!questionData) {
            await utils.safeSendMessage(bot, chatId, '‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', keyboards.getBackToAdminKeyboard());
            return;
        }

        const timestamp = new Date(questionData.timestamp).toLocaleString('ru-RU');
        const questionInfo = `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
üìÖ –í—Ä–µ–º—è: ${timestamp}
‚ùì –í–æ–ø—Ä–æ—Å: ${questionData.question}`;

        await utils.safeSendMessage(bot, chatId, questionInfo, keyboards.getQuestionManagementKeyboard(userId));
    }

    async function handleRejectQuestion(bot, chatId, targetUserId) {
        try {
            const rejectionMessage = '–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–æ–≤–∞';

            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ targetUserId - —ç—Ç–æ —á–∏—Å–ª–æ
            const userChatId = typeof targetUserId === 'string' ? parseInt(targetUserId) : targetUserId;

            await utils.safeSendMessage(bot, userChatId, rejectionMessage, keyboards.getMainMenuKeyboard());

            // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            services.adminAnswers.getPendingQuestions().delete(targetUserId.toString());

            // –£–¥–∞–ª—è–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            await services.adminAnswers.removeQuestionFromFile(targetUserId);

            await utils.safeSendMessage(bot, chatId, '‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏', keyboards.getBackToAdminKeyboard());

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ${error.message}`, keyboards.getBackToAdminKeyboard());
        }
    }–¥–∞–µ–º—Å—è, —á—Ç–æ targetUserId - —ç—Ç–æ —á–∏—Å–ª–æ
            const targetChatId = typeof targetUserId === 'string' ? parseInt(targetUserId) : targetUserId;

            await utils.safeSendMessage(bot, targetChatId, rejectionMessage, {
                parse_mode: 'Markdown',
                ...mainKeyboards.getBackToMenuKeyboard()
            });

            // –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
            services.adminAnswers.getPendingQuestions().delete(targetUserId.toString());

            await utils.safeSendMessage(bot, chatId, `‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ`, keyboards.getBackToAdminKeyboard());

        } catch (error) {
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: ${error.message}`, keyboards.getBackToAdminKeyboard());
        }
    }

    async function handleAdminReload(bot, chatId) {
        try {
            await services.knowledgeBase.loadKnowledgeBase();
            await services.adminAnswers.loadAndProcessAdminAnswers();
            await services.roomsData.loadRoomsData();

            await utils.safeSendMessage(bot, chatId, `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞:

üìö –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${services.knowledgeBase.getKnowledgeBase().length}
üè† –ù–æ–º–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${services.roomsData.getRoomsData().length}`, keyboards.getBackToAdminKeyboard());
        } catch (error) {
            await utils.safeSendMessage(bot, chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`, keyboards.getBackToAdminKeyboard());
        }
    }
};