const logger = require("../logger");
const utils = require("../utils");
const states = require("../states");
const services = {
    knowledgeBase: require("../services/knowledgeBase"),
    adminAnswers: require("../services/adminAnswers")
};
const keyboards = require("../keyboards/mainMenu");
const adminPanelKeyboards = require("../keyboards/adminPanel");

const targetChatId = "-1002826990012"; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–æ–≤

let isHandlersRegistered = false;

module.exports = function setupMessageHandlers(bot, userStates) {
    if (isHandlersRegistered) {
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
        return;
    }
    isHandlersRegistered = true;

    bot.on("message", async (msg) => {
        logger.info(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id}: ${msg.text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${userStates.get(msg.from.id)} –≤ ${new Date().toISOString()}`);
        if (!msg.text || msg.text.startsWith("/") || msg.text.match(/–º–µ–Ω—é|menu/i)) {
            return;
        }

        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const username = msg.from.username || "Unknown";
        const messageText = msg.text.trim();

        if (!messageText) return;

        const userState = userStates.get(userId) || states.MAIN_MENU;

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        if (userState === states.ADMIN_ANSWERING && (await utils.isAdmin(bot, userId))) {
            const answerData = userStates.get(`${userId}_answer_data`);
            if (answerData) {
                const keywords = messageText
                    .split(",")
                    .map((k) => k.trim())
                    .filter((k) => k);

                if (keywords.length > 0) {
                    try {
                        const targetUserId = answerData.targetUserId.toString();
                        await services.adminAnswers.updateAdminAnswer(
                            targetUserId,
                            answerData.answer,
                            keywords
                        );
                        userStates.delete(`${userId}_answer_data`);
                        userStates.set(userId, states.ADMIN_ANSWERING);

                        await utils.safeSendMessage(
                            bot,
                            targetChatId,
                            `‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: ${keywords.join(", ")}`,
                            {
                                parse_mode: "Markdown",
                                message_thread_id: 102,
                                reply_markup: { inline_keyboard: adminPanelKeyboards.getAdminPanelKeyboard() }
                            }
                        );
                    } catch (error) {
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", { error });
                        await utils.safeSendMessage(
                            bot,
                            targetChatId,
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                            {
                                parse_mode: "Markdown",
                                message_thread_id: 102,
                                reply_markup: { inline_keyboard: adminPanelKeyboards.getAdminPanelKeyboard() }
                            }
                        );
                    }
                } else {
                    await utils.safeSendMessage(
                        bot,
                        targetChatId,
                        "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ",
                        {
                            parse_mode: "Markdown",
                            message_thread_id: 102,
                            reply_markup: { inline_keyboard: adminPanelKeyboards.getAdminPanelKeyboard() }
                        }
                    );
                }
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if (userState === states.ADMIN_ANSWERING_BUTTON && (await utils.isAdmin(bot, userId))) {
            const targetUserId = userStates.get(`${userId}_target_user`);
            if (targetUserId) {
                try {
                    const cleanAnswer = messageText.replace(/[_*[\]()~`>#+\-=|{}.!\\]/g, "");
                    const userChatId = typeof targetUserId === "string" ? parseInt(targetUserId) : targetUserId;

                    await utils.safeSendMessage(
                        bot,
                        userChatId,
                        `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n${cleanAnswer}`,
                        {
                            parse_mode: "Markdown",
                            ...keyboards.getBackToMenuKeyboard()
                        }
                    );

                    await services.adminAnswers.deleteQuestion(targetUserId);

                    userStates.delete(`${userId}_target_user`);
                    userStates.set(userId, states.ADMIN_ANSWERING);
                    userStates.set(`${userId}_answer_data`, {
                        targetUserId,
                        answer: cleanAnswer
                    });

                    await utils.safeSendMessage(
                        bot,
                        targetChatId,
                        `‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\nüî§ –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)\n\nüí° –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–∞–≤—Ç–æ" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é AI`,
                        {
                            parse_mode: "Markdown",
                            message_thread_id: 102
                        }
                    );
                } catch (error) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞:", { error });
                    await utils.safeSendMessage(
                        bot,
                        targetChatId,
                        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: ${error.message}`,
                        {
                            parse_mode: "Markdown",
                            message_thread_id: 102,
                            reply_markup: { inline_keyboard: adminPanelKeyboards.getAdminPanelKeyboard() }
                        }
                    );
                    userStates.delete(`${userId}_target_user`);
                    userStates.set(userId, states.ADMIN_ANSWERING);
                }
            }
            return;
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (await utils.isAdmin(bot, userId)) {
            await utils.safeSendMessage(
                bot,
                chatId,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.",
                {
                    parse_mode: "Markdown",
                    reply_markup: { inline_keyboard: adminPanelKeyboards.getAdminPanelKeyboard() }
                }
            );
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ASKING_QUESTIONS
        if (userState === states.ASKING_QUESTIONS) {
            const pendingQuestions = services.adminAnswers.getPendingQuestions();
            const hasPendingQuestion = pendingQuestions.has(userId.toString());

            const autoAnswer = services.knowledgeBase.findAnswerInKnowledgeBase(messageText);

            if (autoAnswer) {
                if (hasPendingQuestion) {
                    pendingQuestions.delete(userId.toString());
                    logger.info(`–£–¥–∞–ª—ë–Ω –æ–∂–∏–¥–∞—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
                }
                await utils.safeSendMessage(bot, chatId, autoAnswer, {
                    parse_mode: "Markdown",
                    ...keyboards.getBackToMenuKeyboard()
                });
            } else {
                if (!hasPendingQuestion) {
                    await services.adminAnswers.saveUnknownQuestion(userId, username, messageText);
                    await utils.forwardToAdmins(bot, userId, username, messageText);
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! ü§î\n\n–Ø –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∏ –æ–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–ê –ø–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é —Å –≥–æ—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ üëá`,
                        {
                            parse_mode: "Markdown",
                            ...keyboards.getBackToMenuKeyboard()
                        }
                    );
                    logger.info(`–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: ${messageText}`);
                } else {
                    await utils.safeSendMessage(
                        bot,
                        chatId,
                        `–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é —Å –≥–æ—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ üëá`,
                        {
                            parse_mode: "Markdown",
                            ...keyboards.getMainMenuKeyboard()
                        }
                    );
                    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ`);
                }
            }
        } else if (userState !== states.BOOKING_PROCESS) {
            await utils.safeSendMessage(
                bot,
                chatId,
                `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é üëá`,
                {
                    parse_mode: "Markdown",
                    ...keyboards.getMainMenuKeyboard()
                }
            );
            logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ${userState} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${messageText}`);
        }
    });
};
