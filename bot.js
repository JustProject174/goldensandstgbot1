const TelegramBot = require("node-telegram-bot-api");
const express = require("express"); // –î–æ–±–∞–≤–ª—è–µ–º Express
const config = require("./config");
const utils = require("./utils");
const states = require("./states");
const { setupCommands } = require("./commands");
const setupMainMenuHandlers = require("./handlers/mainMenu");
const setupAdminHandlers = require("./handlers/adminPanel");
const setupMessageHandlers = require("./handlers/messages");
const setupCommandHandlers = require("./handlers/commands");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const knowledgeBaseService = require("./services/knowledgeBase");
const roomsDataService = require("./services/roomsData");
const adminAnswersService = require("./services/adminAnswers");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if (!config.BOT_TOKEN) {
    console.error("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env");
    process.exit(1);
}

console.log("‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ");
const bot = new TelegramBot(config.BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–æ–∑–¥–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä —Å Express
const app = express();
const PORT = process.env.PORT || 3000; // –ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ .env

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot
app.get("/health", (req, res) => {
    res.status(200).send("OK"); // –û—Ç–≤–µ—á–∞–µ–º 200 OK –¥–ª—è UptimeRobot
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initializeBot() {
    try {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await knowledgeBaseService.loadKnowledgeBase();
        await adminAnswersService.loadAndProcessAdminAnswers();
        await roomsDataService.loadRoomsData();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        await setupCommands(bot);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        const knowledgeBase = knowledgeBaseService.getKnowledgeBase();
        const roomsData = roomsDataService.getRoomsData();
        const admins = config.admins;

        if (!knowledgeBase) {
            console.warn("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞");
        }
        if (!roomsData) {
            console.warn("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã");
        }
        if (!admins) {
            console.warn("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ config.js");
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setupMainMenuHandlers(bot, userStates);
        setupAdminHandlers(bot, userStates);
        setupMessageHandlers(bot, userStates);
        setupCommandHandlers(bot, userStates);

        console.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:
- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: ${knowledgeBase ? knowledgeBase.length : 0} –∑–∞–ø–∏—Å–µ–π
- –ù–æ–º–µ—Ä–Ω–æ–π —Ñ–æ–Ω–¥: ${roomsData ? roomsData.length : 0} –Ω–æ–º–µ—Ä–æ–≤
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${admins ? admins.length : 0}`);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:", error);
        process.exit(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("error", (error) => {
    console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", error);
});

bot.on("polling_error", (error) => {
    console.error("–û—à–∏–±–∫–∞ polling:", error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on("SIGINT", () => {
    console.log("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
    knowledgeBaseService.closeFileWatcher();
    process.exit(0);
});

process.on("SIGTERM", () => {
    console.log("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...");
    knowledgeBaseService.closeFileWatcher();
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initializeBot();